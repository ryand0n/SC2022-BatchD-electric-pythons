{"backend_state":"running","connection_file":"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/.local/share/jupyter/runtime/kernel-ecca632b-42ba-47da-b6db-9d803914adc3.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1660841571112,"exec_count":85,"id":"706a0b","input":"import pandas as pd\nimport numpy as np\nimport plotly.express as px","kernel":"ds_env","pos":0,"start":1660841571095,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841608741,"exec_count":90,"id":"8e3a75","input":"fig = px.bar(df, x ='sudden weight loss', color ='Gender')\nfig.show()","kernel":"ds_env","output":{"0":{"data":{"iframe":"c74ba47705d8e90b57d72b7c50566409a41b0a99"}}},"pos":1,"scrolled":true,"start":1660841607280,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841610709,"exec_count":91,"id":"1f9786","input":"fig = px.histogram(df, x ='visual blurring', color ='Gender')\nfig.show()","kernel":"ds_env","output":{"0":{"data":{"iframe":"8ff902634fefd2529af185d7a314e4c1dba24a37"}}},"pos":3,"scrolled":true,"start":1660841610552,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841611760,"exec_count":92,"id":"70815d","input":"fig = px.pie(df, values ='visual blurring')\nfig.show()","kernel":"ds_env","output":{"0":{"data":{"iframe":"3eac90bc3781835ec63ab4158b0f84fafa7c0d43"}}},"pos":4,"start":1660841611624,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841612243,"exec_count":93,"id":"95eb17","input":"df = pd.read_csv('diabetes_data_upload.csv')","kernel":"ds_env","pos":5,"start":1660841612234,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841615106,"exec_count":94,"id":"34fddf","input":"df.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Gender</th>\n      <th>Polyuria</th>\n      <th>Polydipsia</th>\n      <th>sudden weight loss</th>\n      <th>weakness</th>\n      <th>Polyphagia</th>\n      <th>Genital thrush</th>\n      <th>visual blurring</th>\n      <th>Itching</th>\n      <th>Irritability</th>\n      <th>delayed healing</th>\n      <th>partial paresis</th>\n      <th>muscle stiffness</th>\n      <th>Alopecia</th>\n      <th>Obesity</th>\n      <th>class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>40</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Positive</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>58</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Positive</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>41</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Positive</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>45</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Positive</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>60</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Positive</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   Age Gender Polyuria Polydipsia sudden weight loss weakness Polyphagia  \\\n0   40   Male       No        Yes                 No      Yes         No   \n1   58   Male       No         No                 No      Yes         No   \n2   41   Male      Yes         No                 No      Yes        Yes   \n3   45   Male       No         No                Yes      Yes        Yes   \n4   60   Male      Yes        Yes                Yes      Yes        Yes   \n\n  Genital thrush visual blurring Itching Irritability delayed healing  \\\n0             No              No     Yes           No             Yes   \n1             No             Yes      No           No              No   \n2             No              No     Yes           No             Yes   \n3            Yes              No     Yes           No             Yes   \n4             No             Yes     Yes          Yes             Yes   \n\n  partial paresis muscle stiffness Alopecia Obesity     class  \n0              No              Yes      Yes     Yes  Positive  \n1             Yes               No      Yes      No  Positive  \n2              No              Yes      Yes      No  Positive  \n3              No               No       No      No  Positive  \n4             Yes              Yes      Yes     Yes  Positive  "},"exec_count":94}},"pos":6,"scrolled":true,"start":1660841615052,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841622358,"exec_count":95,"id":"55296e","input":"Visual Blurring \n\n\nWhat is Visual Blurring -  A visual symptom that makes it difficult to see clearly or sharply\n\n\nHow does this symptom relate to diabetes -  If your blood sugar levels change quickly from low to normal, the shape of your eye's lens' can be affected, and your vision can be blurred.\n\n\nWhat is the effect - Blurry or wavy vision in the center of your field of vision","kernel":"ds_env","output":{"0":{"ename":"SyntaxError","evalue":"invalid syntax (3535386915.py, line 1)","traceback":["\u001b[0;36m  Input \u001b[0;32mIn [95]\u001b[0;36m\u001b[0m\n\u001b[0;31m    Visual Blurring\u001b[0m\n\u001b[0m           ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}},"pos":11,"start":1660841622314,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841622947,"exec_count":96,"id":"db3b19","input":"df['Age'].isnull().values.any()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"False"},"exec_count":96}},"pos":12,"start":1660841622935,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841625455,"exec_count":97,"id":"e67a7b","input":"results = []\nfor col in df.columns:\n    missing_or_not = df[col].isnull().values.any()\n    print(col + ' ' + str(missing_or_not))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Age False\nGender False\nPolyuria False\nPolydipsia False\nsudden weight loss False\nweakness False\nPolyphagia False\nGenital thrush False\nvisual blurring False\nItching False\nIrritability False\ndelayed healing False\npartial paresis False\nmuscle stiffness False\nAlopecia False\nObesity False\nclass False\n"}},"pos":13,"start":1660841625285,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841626315,"exec_count":98,"id":"77f8cb","input":"def Change_to_Value (Input):\n    if Input == 'Yes':\n        return 1\n    else:\n        return 0","kernel":"ds_env","pos":14,"start":1660841626304,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841627178,"exec_count":99,"id":"91a3e2","input":"Change_to_Value('No')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0"},"exec_count":99}},"pos":15,"start":1660841627165,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841628382,"exec_count":100,"id":"57e860","input":"def convert(x):\n    if x == 'Yes' or x == 'Male' or x == 'Positive':\n        return 1\n    else:\n        return 0\n","kernel":"ds_env","pos":17,"start":1660841628371,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841628866,"exec_count":101,"id":"da3e0f","input":"convert('Male')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"1"},"exec_count":101}},"pos":18,"start":1660841628858,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841629504,"exec_count":102,"id":"5a5cdb","input":"df['Gender'].apply(convert)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0      1\n1      1\n2      1\n3      1\n4      1\n      ..\n515    0\n516    0\n517    0\n518    0\n519    1\nName: Gender, Length: 520, dtype: int64"},"exec_count":102}},"pos":19,"start":1660841629478,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841630132,"exec_count":103,"id":"66d53c","input":"df['Gender']","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0        Male\n1        Male\n2        Male\n3        Male\n4        Male\n        ...  \n515    Female\n516    Female\n517    Female\n518    Female\n519      Male\nName: Gender, Length: 520, dtype: object"},"exec_count":103}},"pos":20,"start":1660841630125,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841630680,"exec_count":104,"id":"daa5f9","input":"for col in df.columns:\n    if col != 'Age':\n        df[col] = df[col].apply(convert)","kernel":"ds_env","pos":21,"start":1660841630663,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841632250,"exec_count":105,"id":"5c2ae7","input":"X = df.drop(['class'], axis = 1)\nY = df['class']","kernel":"ds_env","pos":24,"start":1660841632221,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841633877,"exec_count":106,"id":"199507","input":"X = df.drop(['class'], axis = 1)\nY = df['class']","kernel":"ds_env","pos":27,"start":1660841633848,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841634429,"exec_count":107,"id":"df7b22","input":"X.corrwith(Y)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"Age                   0.108679\nGender               -0.449233\nPolyuria              0.665922\nPolydipsia            0.648734\nsudden weight loss    0.436568\nweakness              0.243275\nPolyphagia            0.342504\nGenital thrush        0.110288\nvisual blurring       0.251300\nItching              -0.013384\nIrritability          0.299467\ndelayed healing       0.046980\npartial paresis       0.432288\nmuscle stiffness      0.122474\nAlopecia             -0.267512\nObesity               0.072173\ndtype: float64"},"exec_count":107}},"pos":28,"start":1660841634380,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841634969,"exec_count":108,"id":"e90e57","input":"corr = df.corr()","kernel":"ds_env","pos":29,"start":1660841634958,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841635510,"exec_count":109,"id":"668449","input":"corr = df.corr()\ncorr['class']","kernel":"ds_env","output":{"0":{"data":{"text/plain":"Age                   0.108679\nGender               -0.449233\nPolyuria              0.665922\nPolydipsia            0.648734\nsudden weight loss    0.436568\nweakness              0.243275\nPolyphagia            0.342504\nGenital thrush        0.110288\nvisual blurring       0.251300\nItching              -0.013384\nIrritability          0.299467\ndelayed healing       0.046980\npartial paresis       0.432288\nmuscle stiffness      0.122474\nAlopecia             -0.267512\nObesity               0.072173\nclass                 1.000000\nName: class, dtype: float64"},"exec_count":109}},"pos":30,"start":1660841635497,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841636165,"exec_count":110,"id":"77e84e","input":"corr = df.corr()\nfig = px.imshow(corr, aspect=\"auto\", color_continuous_scale='bupu', text_auto = True)\nfig.show()\n\n\n","kernel":"ds_env","output":{"0":{"data":{"iframe":"394a297a4964412c7a1ebe8d60163c94a41b1f8b"}}},"pos":31,"start":1660841636081,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841637254,"exec_count":111,"id":"d413b2","input":"corr_data = X.corrwith(Y).to_frame().reset_index()\nfig = px.bar(corr_data, x='index', y=0, title=\"Correlation between Features and Having Diabetes\")\nfig.show()\n","kernel":"ds_env","output":{"0":{"data":{"iframe":"1ef0f4d2bd4d62cd1020f010559ab8810538802f"}}},"pos":33,"start":1660841637159,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841638152,"exec_count":112,"id":"0f7e8c","input":"X = df.drop(['class', 'Age', 'weakness', 'Genital thrush', 'Itching', 'delayed healing', 'muscle stiffness', 'Obesity'], axis = 1)\ny = df['class']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 42)\n\n\n\n","kernel":"ds_env","pos":34,"start":1660841638141,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841638658,"exec_count":113,"id":"be5467","input":"from sklearn.preprocessing import StandardScaler\nss = StandardScaler()\nX_train = ss.fit_transform(X_train)\nX_test = ss.transform(X_test)\n\n","kernel":"ds_env","pos":35,"start":1660841638648,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841639949,"exec_count":114,"id":"899aa5","input":"# Logistic Regression","kernel":"ds_env","pos":37,"start":1660841639944,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841691396,"exec_count":125,"id":"b5b0f2","input":"from sklearn.datasets import load_iris\nfrom sklearn.linear_model import LogisticRegression\n","kernel":"ds_env","pos":38,"start":1660841691377,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841692264,"exec_count":126,"id":"668510","input":"clf = LogisticRegression(random_state=0).fit(X, y)","kernel":"ds_env","pos":40,"start":1660841692251,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841692830,"exec_count":127,"id":"85b127","input":"y_hat = clf.predict(x_test)\ny_hat","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1,\n       0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,\n       0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1,\n       0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1,\n       1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0])"},"exec_count":127}},"pos":41,"start":1660841692809,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841693713,"exec_count":128,"id":"4d1688","input":"#Compute your MSE.\ntotal_squared_error = (np.sum((y_test - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.1076923076923077\n"}},"pos":42,"start":1660841693707,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841695365,"exec_count":129,"id":"277cc0","input":"#Create a confusion matrix\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":129},"1":{"data":{"image/png":"953b0fc74144b800e31a288ad67b9f7cb54f466b","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":43,"scrolled":true,"start":1660841694852,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841695381,"exec_count":130,"id":"526811","input":"#precision\nfrom sklearn.metrics import precision_score\nprecision_score(y_hat, y_test,  average=None)\n","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([0.84090909, 0.91860465])"},"exec_count":130}},"pos":44,"start":1660841695371,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841696167,"exec_count":131,"id":"70f56b","input":"# accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_hat, y_test, normalize=False)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"116"},"exec_count":131}},"pos":45,"start":1660841696162,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841696978,"exec_count":132,"id":"d9a665","input":"# recall\nfrom sklearn.metrics import recall_score\nrecall_score(y_hat, y_test, average=None)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([0.84090909, 0.91860465])"},"exec_count":132}},"pos":46,"start":1660841696962,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841698311,"exec_count":133,"id":"625ddf","input":"# svm linear","kernel":"ds_env","pos":48,"start":1660841698299,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841698975,"exec_count":134,"id":"1434fa","input":"from sklearn.svm import LinearSVC\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.datasets import make_classification","kernel":"ds_env","pos":49,"start":1660841698963,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841699747,"exec_count":135,"id":"f656c1","input":"clf = make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))\nclf.fit(X, y)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;standardscaler&#x27;, StandardScaler()),\n                (&#x27;linearsvc&#x27;, LinearSVC(random_state=0, tol=1e-05))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;standardscaler&#x27;, StandardScaler()),\n                (&#x27;linearsvc&#x27;, LinearSVC(random_state=0, tol=1e-05))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearSVC</label><div class=\"sk-toggleable__content\"><pre>LinearSVC(random_state=0, tol=1e-05)</pre></div></div></div></div></div></div></div>","text/plain":"Pipeline(steps=[('standardscaler', StandardScaler()),\n                ('linearsvc', LinearSVC(random_state=0, tol=1e-05))])"},"exec_count":135}},"pos":50,"start":1660841699722,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841700263,"exec_count":136,"id":"260e1f","input":"y_hat = clf.predict(x_test)\ny_hat","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1,\n       0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,\n       0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1,\n       0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0])"},"exec_count":136}},"pos":51,"start":1660841700250,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841701473,"exec_count":137,"id":"e727d7","input":"#Compute your MSE.\ntotal_squared_error = (np.sum((y_test - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.11538461538461539\n"}},"pos":53,"start":1660841701445,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841702598,"exec_count":138,"id":"28ed9e","input":"#Create a confusion matrix\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":138},"1":{"data":{"image/png":"35da88e7be71ce2d2267b4e08497a3867ed7cd6d","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":54,"start":1660841702208,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841702707,"exec_count":139,"id":"694191","input":"# precision\nfrom sklearn.metrics import precision_score\nprecision_score(y_hat, y_test,  average=None)\n","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([0.79545455, 0.93023256])"},"exec_count":139}},"pos":55,"start":1660841702699,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841703459,"exec_count":140,"id":"90e984","input":"# accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_hat, y_test, normalize=False)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"115"},"exec_count":140}},"pos":56,"start":1660841703448,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841704055,"exec_count":141,"id":"9449b5","input":"# recall\nfrom sklearn.metrics import recall_score\nrecall_score(y_hat, y_test, average=None)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([0.85365854, 0.8988764 ])"},"exec_count":141}},"pos":57,"start":1660841704038,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841705131,"exec_count":142,"id":"1ba837","input":"#KNN","kernel":"ds_env","pos":59,"start":1660841705122,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841705670,"exec_count":143,"id":"fd46d6","input":"import sklearn #our favorite machine learning library\nfrom sklearn.neighbors import KNeighborsClassifier as KNN #this will import our model as KNN","kernel":"ds_env","pos":60,"start":1660841705660,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841706182,"exec_count":144,"id":"0eab4e","input":"# Creating the KNN model object -- we need to tell it the number of neighbors to look at.\nk = 7 #number of neighbors to look at (look at 7 nearest neighbors)\nmy_KNN_model = KNN(n_neighbors=k)","kernel":"ds_env","pos":61,"start":1660841706172,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841706826,"exec_count":145,"id":"a116e9","input":"my_KNN_model.fit(x_train, y_train) #train the model on our past results x_train (inputs) and y_train (outputs)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=7)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=7)</pre></div></div></div></div></div>","text/plain":"KNeighborsClassifier(n_neighbors=7)"},"exec_count":145}},"pos":62,"start":1660841706757,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841707400,"exec_count":146,"id":"ad15a6","input":"y_hat = my_KNN_model.predict(x_test)","kernel":"ds_env","pos":63,"start":1660841707386,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841707849,"exec_count":147,"id":"15e4c1","input":"y_hat","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,\n       0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1,\n       0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1,\n       1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0])"},"exec_count":147}},"pos":64,"start":1660841707835,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841708538,"exec_count":148,"id":"b5c596","input":"np.array(y_test)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,\n       0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1,\n       1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1,\n       1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0])"},"exec_count":148}},"pos":65,"start":1660841708474,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841709123,"exec_count":149,"id":"a03838","input":"total_squared_error = (np.sum((y_test - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)\n","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.08461538461538462\n"}},"pos":66,"start":1660841709110,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841710092,"exec_count":150,"id":"3781ed","input":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":150},"1":{"data":{"image/png":"9e5806a5cd560788012676a7b43f9879d7fc09bb","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":67,"start":1660841709756,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841710256,"exec_count":151,"id":"075f7d","input":"# precision\nfrom sklearn.metrics import precision_score\nprecision_score(y_hat, y_test,  average=None)\n","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([0.86363636, 0.94186047])"},"exec_count":151}},"pos":68,"start":1660841710242,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841710802,"exec_count":152,"id":"54c259","input":"# accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_hat, y_test, normalize=False)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"119"},"exec_count":152}},"pos":69,"start":1660841710798,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841713653,"exec_count":153,"id":"67961a","input":"# recall\nfrom sklearn.metrics import recall_score\nrecall_score(y_hat, y_test, average=None)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([0.88372093, 0.93103448])"},"exec_count":153}},"pos":70,"start":1660841713645,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841713670,"exec_count":154,"id":"5d5b35","input":"from sklearn.svm import SVC\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.model_selection import GridSearchCV","kernel":"ds_env","pos":72,"start":1660841713657,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841713744,"exec_count":155,"id":"0a62e2","input":"#RBF","kernel":"ds_env","pos":74,"start":1660841713737,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841714587,"exec_count":156,"id":"563984","input":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(8, 6))\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')\n","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":156},"1":{"data":{"image/png":"a05282c3bc173d55935e42ef560e33052bde7de8","text/plain":"<Figure size 576x432 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":75,"start":1660841714353,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841714824,"exec_count":157,"id":"56f823","input":"# precision\nfrom sklearn.metrics import precision_score\nprecision_score(y_hat, y_test,  average=None)\n","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([0.86363636, 0.94186047])"},"exec_count":157}},"pos":76,"start":1660841714810,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841715551,"exec_count":158,"id":"ad7e92","input":"# accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_hat, y_test, normalize=False)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"119"},"exec_count":158}},"pos":77,"start":1660841715537,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841716220,"exec_count":159,"id":"729a4a","input":"# recall\nfrom sklearn.metrics import recall_score\nrecall_score(y_hat, y_test, average=None)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([0.88372093, 0.93103448])"},"exec_count":159}},"pos":78,"start":1660841716183,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841718377,"exec_count":160,"id":"682080","input":"#Logistic regression\n#svmrbf and svm linear\n#knn\n#naive bayes\n#Decision trees\n#Random forest\n\nprecision, accuracy, recall","kernel":"ds_env","output":{"0":{"ename":"NameError","evalue":"name 'precision' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [160]\u001b[0m, in \u001b[0;36m<cell line: 8>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m#Logistic regression\u001b[39;00m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;66;03m#svmrbf and svm linear\u001b[39;00m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;66;03m#knn\u001b[39;00m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m#naive bayes\u001b[39;00m\n\u001b[1;32m      5\u001b[0m \u001b[38;5;66;03m#Decision trees\u001b[39;00m\n\u001b[1;32m      6\u001b[0m \u001b[38;5;66;03m#Random forest\u001b[39;00m\n\u001b[0;32m----> 8\u001b[0m \u001b[43mprecision\u001b[49m, accuracy, recall\n","\u001b[0;31mNameError\u001b[0m: name 'precision' is not defined"]}},"pos":82,"start":1660841718332,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841720968,"exec_count":161,"id":"50e1e3","input":"import sklearn\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test ,y_train, y_test = train_test_split(X, Y)\n","kernel":"ds_env","pos":86,"start":1660841720964,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841721671,"exec_count":162,"id":"d8c2cb","input":"print(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"(390, 9)\n(130, 9)\n(390,)\n(130,)\n"}},"pos":87,"start":1660841721655,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841731635,"exec_count":163,"id":"d222c3","input":"x_test.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Polyuria</th>\n      <th>Polydipsia</th>\n      <th>sudden weight loss</th>\n      <th>Polyphagia</th>\n      <th>visual blurring</th>\n      <th>Irritability</th>\n      <th>partial paresis</th>\n      <th>Alopecia</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>36</th>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>91</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>314</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>51</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>337</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"     Gender  Polyuria  Polydipsia  sudden weight loss  Polyphagia  \\\n36        1         1           0                   0           0   \n91        0         1           1                   1           1   \n314       1         0           0                   1           0   \n51        0         1           1                   1           1   \n337       0         1           1                   1           0   \n\n     visual blurring  Irritability  partial paresis  Alopecia  \n36                 1             0                1         1  \n91                 1             1                1         0  \n314                0             0                0         1  \n51                 1             0                1         0  \n337                1             0                1         0  "},"exec_count":163}},"pos":88,"start":1660841731621,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841733180,"exec_count":164,"id":"a46f63","input":" y_train.head()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"302    1\n153    1\n79     1\n191    1\n356    0\nName: class, dtype: int64"},"exec_count":164}},"pos":91,"start":1660841733160,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841733698,"exec_count":165,"id":"3561f8","input":"y_test.head","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<bound method NDFrame.head of 36     1\n91     1\n314    0\n51     1\n337    1\n      ..\n389    0\n358    1\n30     1\n246    0\n29     1\nName: class, Length: 130, dtype: int64>"},"exec_count":165}},"pos":92,"start":1660841733685,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841735914,"exec_count":166,"id":"05281a","input":"#KNN","kernel":"ds_env","pos":96,"start":1660841735904,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841736383,"exec_count":167,"id":"9da828","input":"import sklearn #our favorite machine learning library\nfrom sklearn.neighbors import KNeighborsClassifier as KNN #this will import our model as KNN\nfrom sklearn.model_selection import GridSearchCV","kernel":"ds_env","pos":97,"start":1660841736368,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841736910,"exec_count":168,"id":"6ae3bf","input":"# Creating the KNN model object -- we need to tell it the number of neighbors to look at.\nk = 7 #number of neighbors to look at (look at 7 nearest neighbors)\nparameters = {'n_neighbors':[3, 5, 7], 'weights': ('uniform', 'distance'), 'algorithm': ('auto', 'ball_tree')}\nmy_KNN_model = KNN()","kernel":"ds_env","pos":98,"start":1660841736899,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841738457,"exec_count":169,"id":"5c7940","input":"clf = GridSearchCV(my_KNN_model, parameters)","kernel":"ds_env","pos":99,"start":1660841738433,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841739570,"exec_count":170,"id":"6b3712","input":"clf.fit(x_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=KNeighborsClassifier(),\n             param_grid={&#x27;algorithm&#x27;: (&#x27;auto&#x27;, &#x27;ball_tree&#x27;),\n                         &#x27;n_neighbors&#x27;: [3, 5, 7],\n                         &#x27;weights&#x27;: (&#x27;uniform&#x27;, &#x27;distance&#x27;)})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=KNeighborsClassifier(),\n             param_grid={&#x27;algorithm&#x27;: (&#x27;auto&#x27;, &#x27;ball_tree&#x27;),\n                         &#x27;n_neighbors&#x27;: [3, 5, 7],\n                         &#x27;weights&#x27;: (&#x27;uniform&#x27;, &#x27;distance&#x27;)})</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div></div></div></div></div></div>","text/plain":"GridSearchCV(estimator=KNeighborsClassifier(),\n             param_grid={'algorithm': ('auto', 'ball_tree'),\n                         'n_neighbors': [3, 5, 7],\n                         'weights': ('uniform', 'distance')})"},"exec_count":170}},"pos":100,"start":1660841738961,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841739583,"exec_count":171,"id":"a96c03","input":"clf.best_params_","kernel":"ds_env","output":{"0":{"data":{"text/plain":"{'algorithm': 'auto', 'n_neighbors': 5, 'weights': 'distance'}"},"exec_count":171}},"pos":101,"start":1660841739579,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841740270,"exec_count":172,"id":"76c2dc","input":"clf.best_score_","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.9384615384615385"},"exec_count":172}},"pos":102,"start":1660841740266,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841740983,"exec_count":173,"id":"6f471c","input":"pred = clf.predict(x_test)","kernel":"ds_env","pos":103,"start":1660841740972,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841741342,"exec_count":174,"id":"56b222","input":"(pred == y_test).mean()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.9461538461538461"},"exec_count":174}},"pos":104,"start":1660841741314,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841741753,"exec_count":175,"id":"2775f9","input":"total_squared_error = (np.sum((y_test - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)\n","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.5307692307692308\n"}},"pos":105,"start":1660841741738,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841742775,"exec_count":176,"id":"d28d0f","input":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')\n","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":176},"1":{"data":{"image/png":"e06e0251d6503cdecd7453f7e525220848182188","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":106,"start":1660841742580,"state":"done","type":"cell"}
{"cell_type":"code","end":1660841744385,"exec_count":177,"id":"def998","input":"#SVM linear","kernel":"ds_env","pos":109,"start":1660841744374,"state":"done","type":"cell"}
{"cell_type":"code","end":1660843183537,"exec_count":204,"id":"2be201","input":"clf.best_score_","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.9153846153846154"},"exec_count":204}},"pos":116,"start":1660843183524,"state":"done","type":"cell"}
{"cell_type":"code","end":1660843246147,"exec_count":205,"id":"c90615","input":"pred = clf.predict(x_test)","kernel":"ds_env","pos":117,"start":1660843246121,"state":"done","type":"cell"}
{"cell_type":"code","end":1660843283411,"exec_count":206,"id":"651505","input":"(pred == y_test).mean()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.8769230769230769"},"exec_count":206}},"pos":118,"start":1660843283395,"state":"done","type":"cell"}
{"cell_type":"code","end":1660843301529,"exec_count":207,"id":"ab39af","input":"total_squared_error = (np.sum((y_test - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)\n","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.5307692307692308\n"}},"pos":119,"start":1660843301523,"state":"done","type":"cell"}
{"cell_type":"code","end":1660843318515,"exec_count":208,"id":"fbaca7","input":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')\n","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":208},"1":{"data":{"image/png":"e06e0251d6503cdecd7453f7e525220848182188","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":120,"start":1660843318251,"state":"done","type":"cell"}
{"cell_type":"code","end":1660843973553,"exec_count":213,"id":"bc72f0","input":"from sklearn.datasets import load_iris\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\n","kernel":"ds_env","pos":123,"start":1660843973509,"state":"done","type":"cell"}
{"cell_type":"code","end":1660844068373,"exec_count":218,"id":"62f91a","input":"clf = GridSearchCV(my_LR_model, parameters)","kernel":"ds_env","pos":124,"start":1660844068357,"state":"done","type":"cell"}
{"cell_type":"code","end":1660844069426,"exec_count":219,"id":"334c66","input":"clf.fit(x_train, y_train)","kernel":"ds_env","output":{"0":{"name":"stderr","text":"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:378: FitFailedWarning:\n\n\n40 fits failed out of a total of 75.\nThe score on these train-test partitions for these parameters will be set to nan.\nIf these failures are not expected, you can try to debug them by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n5 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py\", line 1091, in fit\n    solver = _check_solver(self.solver, self.penalty, self.dual)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py\", line 61, in _check_solver\n    raise ValueError(\nValueError: Solver newton-cg supports only 'l2' or 'none' penalties, got l1 penalty.\n\n--------------------------------------------------------------------------------\n5 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py\", line 1091, in fit\n    solver = _check_solver(self.solver, self.penalty, self.dual)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py\", line 61, in _check_solver\n    raise ValueError(\nValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got l1 penalty.\n\n--------------------------------------------------------------------------------\n5 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py\", line 1091, in fit\n    solver = _check_solver(self.solver, self.penalty, self.dual)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py\", line 61, in _check_solver\n    raise ValueError(\nValueError: Solver sag supports only 'l2' or 'none' penalties, got l1 penalty.\n\n--------------------------------------------------------------------------------\n5 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py\", line 1091, in fit\n    solver = _check_solver(self.solver, self.penalty, self.dual)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py\", line 61, in _check_solver\n    raise ValueError(\nValueError: Solver newton-cg supports only 'l2' or 'none' penalties, got elasticnet penalty.\n\n--------------------------------------------------------------------------------\n5 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py\", line 1091, in fit\n    solver = _check_solver(self.solver, self.penalty, self.dual)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py\", line 61, in _check_solver\n    raise ValueError(\nValueError: Solver lbfgs supports only 'l2' or 'none' penalties, got elasticnet penalty.\n\n--------------------------------------------------------------------------------\n5 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py\", line 1091, in fit\n    solver = _check_solver(self.solver, self.penalty, self.dual)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py\", line 71, in _check_solver\n    raise ValueError(\nValueError: Only 'saga' solver supports elasticnet penalty, got solver=liblinear.\n\n--------------------------------------------------------------------------------\n5 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py\", line 1091, in fit\n    solver = _check_solver(self.solver, self.penalty, self.dual)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py\", line 61, in _check_solver\n    raise ValueError(\nValueError: Solver sag supports only 'l2' or 'none' penalties, got elasticnet penalty.\n\n--------------------------------------------------------------------------------\n5 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py\", line 1101, in fit\n    raise ValueError(\nValueError: l1_ratio must be between 0 and 1; got (l1_ratio=None)\n\n\n/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_search.py:953: UserWarning:\n\nOne or more of the test scores are non-finite: [       nan        nan 0.92051282        nan 0.92051282 0.9025641\n 0.9025641  0.9025641  0.9025641  0.9025641         nan        nan\n        nan        nan        nan]\n\n"},"1":{"data":{"text/html":"<style>#sk-container-id-7 {color: black;background-color: white;}#sk-container-id-7 pre{padding: 0;}#sk-container-id-7 div.sk-toggleable {background-color: white;}#sk-container-id-7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-7 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-7 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-7 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-7 div.sk-item {position: relative;z-index: 1;}#sk-container-id-7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-7 div.sk-item::before, #sk-container-id-7 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-7 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-7 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-7 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-7 div.sk-label-container {text-align: center;}#sk-container-id-7 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-7 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=LogisticRegression(),\n             param_grid={&#x27;penalty&#x27;: (&#x27;l1&#x27;, &#x27;l2&#x27;, &#x27;elasticnet&#x27;),\n                         &#x27;solver&#x27;: (&#x27;newton-cg&#x27;, &#x27;lbfgs&#x27;, &#x27;liblinear&#x27;, &#x27;sag&#x27;,\n                                    &#x27;saga&#x27;)})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-17\" type=\"checkbox\" ><label for=\"sk-estimator-id-17\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=LogisticRegression(),\n             param_grid={&#x27;penalty&#x27;: (&#x27;l1&#x27;, &#x27;l2&#x27;, &#x27;elasticnet&#x27;),\n                         &#x27;solver&#x27;: (&#x27;newton-cg&#x27;, &#x27;lbfgs&#x27;, &#x27;liblinear&#x27;, &#x27;sag&#x27;,\n                                    &#x27;saga&#x27;)})</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" ><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" ><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div></div></div></div></div></div>","text/plain":"GridSearchCV(estimator=LogisticRegression(),\n             param_grid={'penalty': ('l1', 'l2', 'elasticnet'),\n                         'solver': ('newton-cg', 'lbfgs', 'liblinear', 'sag',\n                                    'saga')})"},"exec_count":219}},"pos":125,"start":1660844068994,"state":"done","type":"cell"}
{"cell_type":"code","end":1660852749607,"exec_count":290,"id":"d9bc80","input":"from sklearn.svm import LinearSVC\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import GridSearchCV","kernel":"ds_env","pos":110,"start":1660852749571,"state":"done","type":"cell"}
{"cell_type":"code","end":1660852750931,"exec_count":291,"id":"abfa55","input":"clf = make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))\nparameters = {'penalty': ('l1', 'l2'),'loss':('hinge','squared_hinge'), 'multi_class':('ovr', 'crammer_singer')}\nmy_svm_model = LinearSVC()\n","kernel":"ds_env","pos":112,"start":1660852750916,"state":"done","type":"cell"}
{"cell_type":"code","end":1660852751754,"exec_count":292,"id":"7a386e","input":"clf = GridSearchCV(my_svm_model, parameters)","kernel":"ds_env","pos":113,"start":1660852751735,"state":"done","type":"cell"}
{"cell_type":"code","end":1660852753024,"exec_count":293,"id":"6d733b","input":"clf.fit(x_train, y_train)","kernel":"ds_env","output":{"0":{"name":"stderr","text":"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:378: FitFailedWarning:\n\n\n10 fits failed out of a total of 40.\nThe score on these train-test partitions for these parameters will be set to nan.\nIf these failures are not expected, you can try to debug them by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n5 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/svm/_classes.py\", line 257, in fit\n    self.coef_, self.intercept_, n_iter_ = _fit_liblinear(\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/svm/_base.py\", line 1204, in _fit_liblinear\n    solver_type = _get_liblinear_solver_type(multi_class, penalty, loss, dual)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/svm/_base.py\", line 1043, in _get_liblinear_solver_type\n    raise ValueError(\nValueError: Unsupported set of arguments: The combination of penalty='l1' and loss='hinge' is not supported, Parameters: penalty='l1', loss='hinge', dual=True\n\n--------------------------------------------------------------------------------\n5 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/svm/_classes.py\", line 257, in fit\n    self.coef_, self.intercept_, n_iter_ = _fit_liblinear(\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/svm/_base.py\", line 1204, in _fit_liblinear\n    solver_type = _get_liblinear_solver_type(multi_class, penalty, loss, dual)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/svm/_base.py\", line 1043, in _get_liblinear_solver_type\n    raise ValueError(\nValueError: Unsupported set of arguments: The combination of penalty='l1' and loss='squared_hinge' are not supported when dual=True, Parameters: penalty='l1', loss='squared_hinge', dual=True\n\n\n/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_search.py:953: UserWarning:\n\nOne or more of the test scores are non-finite: [       nan 0.8974359  0.91025641 0.90769231        nan 0.9\n 0.91282051 0.91282051]\n\n"},"1":{"data":{"text/html":"<style>#sk-container-id-9 {color: black;background-color: white;}#sk-container-id-9 pre{padding: 0;}#sk-container-id-9 div.sk-toggleable {background-color: white;}#sk-container-id-9 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-9 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-9 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-9 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-9 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-9 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-9 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-9 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-9 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-9 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-9 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-9 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-9 div.sk-item {position: relative;z-index: 1;}#sk-container-id-9 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-9 div.sk-item::before, #sk-container-id-9 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-9 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-9 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-9 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-9 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-9 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-9 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-9 div.sk-label-container {text-align: center;}#sk-container-id-9 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-9 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-9\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=LinearSVC(),\n             param_grid={&#x27;loss&#x27;: (&#x27;hinge&#x27;, &#x27;squared_hinge&#x27;),\n                         &#x27;multi_class&#x27;: (&#x27;ovr&#x27;, &#x27;crammer_singer&#x27;),\n                         &#x27;penalty&#x27;: (&#x27;l1&#x27;, &#x27;l2&#x27;)})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-23\" type=\"checkbox\" ><label for=\"sk-estimator-id-23\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=LinearSVC(),\n             param_grid={&#x27;loss&#x27;: (&#x27;hinge&#x27;, &#x27;squared_hinge&#x27;),\n                         &#x27;multi_class&#x27;: (&#x27;ovr&#x27;, &#x27;crammer_singer&#x27;),\n                         &#x27;penalty&#x27;: (&#x27;l1&#x27;, &#x27;l2&#x27;)})</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-24\" type=\"checkbox\" ><label for=\"sk-estimator-id-24\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: LinearSVC</label><div class=\"sk-toggleable__content\"><pre>LinearSVC()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-25\" type=\"checkbox\" ><label for=\"sk-estimator-id-25\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearSVC</label><div class=\"sk-toggleable__content\"><pre>LinearSVC()</pre></div></div></div></div></div></div></div></div></div></div>","text/plain":"GridSearchCV(estimator=LinearSVC(),\n             param_grid={'loss': ('hinge', 'squared_hinge'),\n                         'multi_class': ('ovr', 'crammer_singer'),\n                         'penalty': ('l1', 'l2')})"},"exec_count":293}},"pos":114,"start":1660852752753,"state":"done","type":"cell"}
{"cell_type":"code","end":1660852754392,"exec_count":294,"id":"306f0d","input":"clf.best_params_","kernel":"ds_env","output":{"0":{"data":{"text/plain":"{'loss': 'squared_hinge', 'multi_class': 'crammer_singer', 'penalty': 'l1'}"},"exec_count":294}},"pos":115,"scrolled":false,"start":1660852754374,"state":"done","type":"cell"}
{"cell_type":"code","id":"040e5a","input":"","pos":10,"type":"cell"}
{"cell_type":"code","id":"159137","input":"","pos":85,"type":"cell"}
{"cell_type":"code","id":"16b339","input":"","pos":32,"type":"cell"}
{"cell_type":"code","id":"1c1bfa","input":"","pos":39,"type":"cell"}
{"cell_type":"code","id":"2f35c2","input":"","pos":89,"type":"cell"}
{"cell_type":"code","id":"335c51","input":"","pos":84,"type":"cell"}
{"cell_type":"code","id":"3a2654","input":"","pos":80,"type":"cell"}
{"cell_type":"code","id":"53f52e","input":"","pos":93,"type":"cell"}
{"cell_type":"code","id":"5d1418","input":"","pos":108,"type":"cell"}
{"cell_type":"code","id":"799ef8","input":"","pos":90,"type":"cell"}
{"cell_type":"code","id":"7af958","input":"","pos":47,"type":"cell"}
{"cell_type":"code","id":"8711fc","input":"","pos":52,"type":"cell"}
{"cell_type":"code","id":"9045f9","input":"","pos":22,"type":"cell"}
{"cell_type":"code","id":"935370","input":"","pos":16,"type":"cell"}
{"cell_type":"code","id":"99e966","input":"","pos":71,"type":"cell"}
{"cell_type":"code","id":"9c8ffb","input":"","pos":111,"type":"cell"}
{"cell_type":"code","id":"9e4995","input":"# Logistic Regression","pos":122,"type":"cell"}
{"cell_type":"code","id":"a17197","input":"\n","pos":81,"type":"cell"}
{"cell_type":"code","id":"a2c269","input":"","pos":83,"type":"cell"}
{"cell_type":"code","id":"ae649e","input":"","pos":107,"type":"cell"}
{"cell_type":"code","id":"b24ae0","input":"","pos":36,"type":"cell"}
{"cell_type":"code","id":"ba5dfb","input":"","pos":94,"type":"cell"}
{"cell_type":"code","id":"bbdc9e","input":"","pos":121,"type":"cell"}
{"cell_type":"code","id":"c376c1","input":"","pos":58,"type":"cell"}
{"cell_type":"code","id":"c4b182","input":"","pos":2,"type":"cell"}
{"cell_type":"code","id":"de1b97","input":"","pos":23,"type":"cell"}
{"cell_type":"code","id":"e6b96e","input":"","pos":9,"type":"cell"}
{"cell_type":"code","id":"ea4192","input":"","pos":95,"type":"cell"}
{"cell_type":"code","id":"eaa7fa","input":"","pos":8,"type":"cell"}
{"cell_type":"code","id":"eb1172","input":"","pos":73,"type":"cell"}
{"cell_type":"code","id":"f34b06","input":"","pos":79,"type":"cell"}
{"cell_type":"code","id":"f95af9","input":"","pos":7,"type":"cell"}
{"cell_type":"code","id":"f9804b","input":"","pos":26,"type":"cell"}
{"cell_type":"code","id":"ff3350","input":"","pos":25,"type":"cell"}
{"end":1660844067546,"exec_count":217,"id":"9e6a10","input":"clf = LogisticRegression(random_state=0).fit(X, y)\nparameters = {'penalty': ('l1', 'l2', 'elasticnet'), 'solver': ('newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga')}\nmy_LR_model = LogisticRegression()","kernel":"ds_env","pos":123.5,"start":1660844067525,"state":"done","type":"cell"}
{"end":1660844093886,"exec_count":220,"id":"9f5810","input":"clf.best_params_","kernel":"ds_env","output":{"0":{"data":{"text/plain":"{'penalty': 'l1', 'solver': 'liblinear'}"},"exec_count":220}},"pos":126,"start":1660844093839,"state":"done","type":"cell"}
{"end":1660844108286,"exec_count":221,"id":"bc801f","input":"clf.best_score_","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.9205128205128205"},"exec_count":221}},"pos":127,"start":1660844108257,"state":"done","type":"cell"}
{"end":1660844122375,"exec_count":222,"id":"e396c2","input":"pred = clf.predict(x_test)","kernel":"ds_env","pos":128,"start":1660844122353,"state":"done","type":"cell"}
{"end":1660844143059,"exec_count":223,"id":"c2b707","input":"(pred == y_test).mean()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.8923076923076924"},"exec_count":223}},"pos":129,"start":1660844143044,"state":"done","type":"cell"}
{"end":1660844158707,"exec_count":224,"id":"d80b96","input":"total_squared_error = (np.sum((y_test - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.5307692307692308\n"}},"pos":129.5,"start":1660844158685,"state":"done","type":"cell"}
{"end":1660844175666,"exec_count":225,"id":"7853ac","input":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')\n","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":225},"1":{"data":{"image/png":"e06e0251d6503cdecd7453f7e525220848182188","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":129.75,"start":1660844175195,"state":"done","type":"cell"}
{"end":1660848943562,"exec_count":279,"id":"420f58","input":"import numpy as np\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV\n","kernel":"ds_env","pos":129.96875,"start":1660848943540,"state":"done","type":"cell"}
{"end":1660848944256,"exec_count":280,"id":"73bb9e","input":"clf = make_pipeline(StandardScaler(),SVC(gamma='auto')).fit(X,y)\nparameters = {'kernel': ('rbf', 'linear'),'decision_function_shape':('ovo', 'ovr')}\nmy_svc_model = SVC()","kernel":"ds_env","pos":129.984375,"start":1660848944243,"state":"done","type":"cell"}
{"end":1660848948913,"exec_count":281,"id":"934838","input":"clf = GridSearchCV(my_svc_model, parameters)","kernel":"ds_env","pos":129.9921875,"start":1660848948897,"state":"done","type":"cell"}
{"end":1660848950308,"exec_count":282,"id":"6567bb","input":"clf.fit(x_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-8 {color: black;background-color: white;}#sk-container-id-8 pre{padding: 0;}#sk-container-id-8 div.sk-toggleable {background-color: white;}#sk-container-id-8 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-8 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-8 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-8 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-8 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-8 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-8 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-8 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-8 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-8 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-8 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-8 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-8 div.sk-item {position: relative;z-index: 1;}#sk-container-id-8 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-8 div.sk-item::before, #sk-container-id-8 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-8 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-8 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-8 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-8 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-8 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-8 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-8 div.sk-label-container {text-align: center;}#sk-container-id-8 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-8 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-8\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=SVC(),\n             param_grid={&#x27;decision_function_shape&#x27;: (&#x27;ovo&#x27;, &#x27;ovr&#x27;),\n                         &#x27;kernel&#x27;: (&#x27;rbf&#x27;, &#x27;linear&#x27;)})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-20\" type=\"checkbox\" ><label for=\"sk-estimator-id-20\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=SVC(),\n             param_grid={&#x27;decision_function_shape&#x27;: (&#x27;ovo&#x27;, &#x27;ovr&#x27;),\n                         &#x27;kernel&#x27;: (&#x27;rbf&#x27;, &#x27;linear&#x27;)})</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-21\" type=\"checkbox\" ><label for=\"sk-estimator-id-21\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-22\" type=\"checkbox\" ><label for=\"sk-estimator-id-22\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div></div></div></div></div></div></div></div>","text/plain":"GridSearchCV(estimator=SVC(),\n             param_grid={'decision_function_shape': ('ovo', 'ovr'),\n                         'kernel': ('rbf', 'linear')})"},"exec_count":282}},"pos":129.99609375,"start":1660848950110,"state":"done","type":"cell"}
{"end":1660848968454,"exec_count":283,"id":"76063e","input":"clf.best_params_","kernel":"ds_env","output":{"0":{"data":{"text/plain":"{'decision_function_shape': 'ovo', 'kernel': 'rbf'}"},"exec_count":283}},"pos":130,"start":1660848968404,"state":"done","type":"cell"}
{"end":1660848983379,"exec_count":284,"id":"b73e43","input":"clf.best_score_","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.9487179487179487"},"exec_count":284}},"pos":130.5,"start":1660848983357,"state":"done","type":"cell"}
{"end":1660849048762,"exec_count":285,"id":"b6216b","input":"pred = clf.predict(x_test)","kernel":"ds_env","pos":130.75,"start":1660849048744,"state":"done","type":"cell"}
{"end":1660849059996,"exec_count":286,"id":"2c0cc1","input":"(pred == y_test).mean()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.9153846153846154"},"exec_count":286}},"pos":130.875,"start":1660849059977,"state":"done","type":"cell"}
{"end":1660849080070,"exec_count":287,"id":"ff0404","input":"total_squared_error = (np.sum((y_test - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.5307692307692308\n"}},"pos":131,"start":1660849080060,"state":"done","type":"cell"}
{"end":1660849104201,"exec_count":288,"id":"d0721c","input":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')\n","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":288},"1":{"data":{"image/png":"e06e0251d6503cdecd7453f7e525220848182188","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":132,"start":1660849103955,"state":"done","type":"cell"}
{"end":1660860023951,"exec_count":302,"id":"390b5c","input":"import plotly.express as px\n# This dataframe has 244 lines, but 4 distinct values for `day`\nDF = df\nfig = px.pie(DF, values='sudden weight loss', names='class', title= 'Sudden Weight Loss correlation with Diabetes', hole= .3)\nfig.show()","kernel":"ds_env","output":{"0":{"data":{"iframe":"49c485ce5aa501c7f9f420aac4b68a1f83ec6d5b"}}},"pos":4.5,"start":1660860023862,"state":"done","type":"cell"}
{"id":"18bc60","input":"","pos":134,"type":"cell"}
{"id":"4aa2ad","input":"# RBF","pos":129.9375,"type":"cell"}
{"id":"52cad1","input":"","pos":4.875,"type":"cell"}
{"id":"80a583","input":"","pos":129.875,"type":"cell"}
{"id":"f05cdd","input":"import plotly.express as px\n# This dataframe has 244 lines, but 4 distinct values for `day`\nDF = df\nfig = px.pie(DF, values='sudden weight loss', names='class', title= 'Sudden Weight Loss')\nfig.show()","pos":4.75,"type":"cell"}
{"id":"fa2b3a","input":"","pos":133,"type":"cell"}
{"id":0,"time":1660755416776,"type":"user"}
{"last_load":1660840511442,"type":"file"}