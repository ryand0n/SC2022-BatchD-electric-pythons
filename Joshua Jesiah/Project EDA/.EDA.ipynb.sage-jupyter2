{"backend_state":"running","connection_file":"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/.local/share/jupyter/runtime/kernel-4b0d5af5-9b7a-4a87-bf25-d4e2771bbca8.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1660755507866,"exec_count":1,"id":"706a0b","input":"import pandas as pd\nimport numpy as np\nimport plotly.express as px","kernel":"ds_env","pos":0,"start":1660755507467,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755513561,"exec_count":5,"id":"95eb17","input":"df = pd.read_csv('diabetes_data_upload.csv')","kernel":"ds_env","pos":5,"start":1660755513549,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755515870,"exec_count":6,"id":"34fddf","input":"df.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Gender</th>\n      <th>Polyuria</th>\n      <th>Polydipsia</th>\n      <th>sudden weight loss</th>\n      <th>weakness</th>\n      <th>Polyphagia</th>\n      <th>Genital thrush</th>\n      <th>visual blurring</th>\n      <th>Itching</th>\n      <th>Irritability</th>\n      <th>delayed healing</th>\n      <th>partial paresis</th>\n      <th>muscle stiffness</th>\n      <th>Alopecia</th>\n      <th>Obesity</th>\n      <th>class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>40</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Positive</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>58</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Positive</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>41</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Positive</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>45</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Positive</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>60</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Positive</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   Age Gender Polyuria Polydipsia sudden weight loss weakness Polyphagia  \\\n0   40   Male       No        Yes                 No      Yes         No   \n1   58   Male       No         No                 No      Yes         No   \n2   41   Male      Yes         No                 No      Yes        Yes   \n3   45   Male       No         No                Yes      Yes        Yes   \n4   60   Male      Yes        Yes                Yes      Yes        Yes   \n\n  Genital thrush visual blurring Itching Irritability delayed healing  \\\n0             No              No     Yes           No             Yes   \n1             No             Yes      No           No              No   \n2             No              No     Yes           No             Yes   \n3            Yes              No     Yes           No             Yes   \n4             No             Yes     Yes          Yes             Yes   \n\n  partial paresis muscle stiffness Alopecia Obesity     class  \n0              No              Yes      Yes     Yes  Positive  \n1             Yes               No      Yes      No  Positive  \n2              No              Yes      Yes      No  Positive  \n3              No               No       No      No  Positive  \n4             Yes              Yes      Yes     Yes  Positive  "},"exec_count":6}},"pos":6,"scrolled":true,"start":1660755515847,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755521292,"exec_count":7,"id":"55296e","input":"Visual Blurring \n\n\nWhat is Visual Blurring -  A visual symptom that makes it difficult to see clearly or sharply\n\n\nHow does this symptom relate to diabetes -  If your blood sugar levels change quickly from low to normal, the shape of your eye's lens' can be affected, and your vision can be blurred.\n\n\nWhat is the effect - Blurry or wavy vision in the center of your field of vision","kernel":"ds_env","output":{"0":{"ename":"SyntaxError","evalue":"invalid syntax (3535386915.py, line 1)","traceback":["\u001b[0;36m  Input \u001b[0;32mIn [7]\u001b[0;36m\u001b[0m\n\u001b[0;31m    Visual Blurring\u001b[0m\n\u001b[0m           ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}},"pos":11,"start":1660755521287,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755522182,"exec_count":8,"id":"db3b19","input":"df['Age'].isnull().values.any()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"False"},"exec_count":8}},"pos":12,"start":1660755522171,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755522873,"exec_count":9,"id":"e67a7b","input":"results = []\nfor col in df.columns:\n    missing_or_not = df[col].isnull().values.any()\n    print(col + ' ' + str(missing_or_not))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Age False\nGender False\nPolyuria False\nPolydipsia False\nsudden weight loss False\nweakness False\nPolyphagia False\nGenital thrush False\nvisual blurring False\nItching False\nIrritability False\ndelayed healing False\npartial paresis False\nmuscle stiffness False\nAlopecia False\nObesity False\nclass False\n"}},"pos":13,"start":1660755522861,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755523856,"exec_count":10,"id":"77f8cb","input":"def Change_to_Value (Input):\n    if Input == 'Yes':\n        return 1\n    else:\n        return 0","kernel":"ds_env","pos":14,"start":1660755523839,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755524760,"exec_count":11,"id":"91a3e2","input":"Change_to_Value('No')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0"},"exec_count":11}},"pos":15,"start":1660755524745,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755526187,"exec_count":12,"id":"57e860","input":"def convert(x):\n    if x == 'Yes' or x == 'Male' or x == 'Positive':\n        return 1\n    else:\n        return 0\n","kernel":"ds_env","pos":17,"start":1660755526184,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755526906,"exec_count":13,"id":"da3e0f","input":"convert('Male')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"1"},"exec_count":13}},"pos":18,"start":1660755526896,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755527934,"exec_count":14,"id":"5a5cdb","input":"df['Gender'].apply(convert)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0      1\n1      1\n2      1\n3      1\n4      1\n      ..\n515    0\n516    0\n517    0\n518    0\n519    1\nName: Gender, Length: 520, dtype: int64"},"exec_count":14}},"pos":19,"start":1660755527900,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755528952,"exec_count":15,"id":"66d53c","input":"df['Gender']","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0        Male\n1        Male\n2        Male\n3        Male\n4        Male\n        ...  \n515    Female\n516    Female\n517    Female\n518    Female\n519      Male\nName: Gender, Length: 520, dtype: object"},"exec_count":15}},"pos":20,"start":1660755528937,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755529688,"exec_count":16,"id":"daa5f9","input":"for col in df.columns:\n    if col != 'Age':\n        df[col] = df[col].apply(convert)","kernel":"ds_env","pos":21,"start":1660755529672,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755532224,"exec_count":17,"id":"5c2ae7","input":"X = df.drop(['class'], axis = 1)\nY = df['class']","kernel":"ds_env","pos":24,"start":1660755532213,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755533940,"exec_count":18,"id":"199507","input":"X = df.drop(['class'], axis = 1)\nY = df['class']","kernel":"ds_env","pos":27,"start":1660755533936,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755534557,"exec_count":19,"id":"df7b22","input":"X.corrwith(Y)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"Age                   0.108679\nGender               -0.449233\nPolyuria              0.665922\nPolydipsia            0.648734\nsudden weight loss    0.436568\nweakness              0.243275\nPolyphagia            0.342504\nGenital thrush        0.110288\nvisual blurring       0.251300\nItching              -0.013384\nIrritability          0.299467\ndelayed healing       0.046980\npartial paresis       0.432288\nmuscle stiffness      0.122474\nAlopecia             -0.267512\nObesity               0.072173\ndtype: float64"},"exec_count":19}},"pos":28,"start":1660755534526,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755535142,"exec_count":20,"id":"e90e57","input":"corr = df.corr()","kernel":"ds_env","pos":29,"start":1660755535137,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755536070,"exec_count":21,"id":"668449","input":"corr = df.corr()\ncorr['class']","kernel":"ds_env","output":{"0":{"data":{"text/plain":"Age                   0.108679\nGender               -0.449233\nPolyuria              0.665922\nPolydipsia            0.648734\nsudden weight loss    0.436568\nweakness              0.243275\nPolyphagia            0.342504\nGenital thrush        0.110288\nvisual blurring       0.251300\nItching              -0.013384\nIrritability          0.299467\ndelayed healing       0.046980\npartial paresis       0.432288\nmuscle stiffness      0.122474\nAlopecia             -0.267512\nObesity               0.072173\nclass                 1.000000\nName: class, dtype: float64"},"exec_count":21}},"pos":30,"start":1660755536060,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755537556,"exec_count":22,"id":"77e84e","input":"corr = df.corr()\nfig = px.imshow(corr, aspect=\"auto\", color_continuous_scale='bupu', text_auto = True)\nfig.show()\n\n\n","kernel":"ds_env","output":{"0":{"data":{"iframe":"0213f09ce50046286e53329c65baa66775fea759"}}},"pos":31,"start":1660755536830,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755539597,"exec_count":23,"id":"d413b2","input":"corr_data = X.corrwith(Y).to_frame().reset_index()\nfig = px.bar(corr_data, x='index', y=0, title=\"Correlation between Features and Having Diabetes\")\nfig.show()\n","kernel":"ds_env","output":{"0":{"data":{"iframe":"86bc82dda926b9302d6d74b8df7ffccf46a1fe9e"}}},"pos":33,"start":1660755539493,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755592036,"exec_count":56,"id":"0f7e8c","input":"X = df.drop(['class', 'Age', 'weakness', 'Genital thrush', 'Itching', 'delayed healing', 'muscle stiffness', 'Obesity'], axis = 1)\ny = df['class']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 42)\n\n\n\n","kernel":"ds_env","pos":34,"start":1660755592002,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755593675,"exec_count":57,"id":"be5467","input":"from sklearn.preprocessing import StandardScaler\nss = StandardScaler()\nX_train = ss.fit_transform(X_train)\nX_test = ss.transform(X_test)\n\n","kernel":"ds_env","pos":35,"start":1660755593661,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755596158,"exec_count":58,"id":"899aa5","input":"# Logistic Regression","kernel":"ds_env","pos":37,"start":1660755596155,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755597764,"exec_count":60,"id":"668510","input":"clf = LogisticRegression(random_state=0).fit(X, y)","kernel":"ds_env","pos":39,"start":1660755597748,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755598395,"exec_count":61,"id":"85b127","input":"y_hat = clf.predict(x_test)\ny_hat","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,\n       0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0,\n       1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0,\n       0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0,\n       1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1])"},"exec_count":61}},"pos":40,"start":1660755598375,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755599511,"exec_count":62,"id":"4d1688","input":"#Compute your MSE.\ntotal_squared_error = (np.sum((y_test - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.45384615384615384\n"}},"pos":41,"start":1660755599499,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755600971,"exec_count":63,"id":"277cc0","input":"#Create a confusion matrix\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":63},"1":{"data":{"image/png":"a2cd3603b4deb22f400f70cb67c79e2509cc0a98","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":42,"scrolled":true,"start":1660755600376,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755602353,"exec_count":64,"id":"625ddf","input":"# svm linear","kernel":"ds_env","pos":44,"start":1660755602339,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755603159,"exec_count":65,"id":"1434fa","input":"from sklearn.svm import LinearSVC\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.datasets import make_classification","kernel":"ds_env","pos":45,"start":1660755603146,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755603958,"exec_count":66,"id":"f656c1","input":"clf = make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))\nclf.fit(X, y)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;standardscaler&#x27;, StandardScaler()),\n                (&#x27;linearsvc&#x27;, LinearSVC(random_state=0, tol=1e-05))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;standardscaler&#x27;, StandardScaler()),\n                (&#x27;linearsvc&#x27;, LinearSVC(random_state=0, tol=1e-05))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearSVC</label><div class=\"sk-toggleable__content\"><pre>LinearSVC(random_state=0, tol=1e-05)</pre></div></div></div></div></div></div></div>","text/plain":"Pipeline(steps=[('standardscaler', StandardScaler()),\n                ('linearsvc', LinearSVC(random_state=0, tol=1e-05))])"},"exec_count":66}},"pos":46,"start":1660755603876,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755604566,"exec_count":67,"id":"260e1f","input":"y_hat = clf.predict(x_test)\ny_hat","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,\n       1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0,\n       1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0,\n       0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0,\n       1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1])"},"exec_count":67}},"pos":47,"start":1660755604553,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755605899,"exec_count":68,"id":"e727d7","input":"#Compute your MSE.\ntotal_squared_error = (np.sum((y_test - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.4307692307692308\n"}},"pos":49,"start":1660755605884,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755627434,"exec_count":70,"id":"28ed9e","input":"#Create a confusion matrix\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":70},"1":{"data":{"image/png":"08df4b5748387898d54da2c7fb24a2385f66bd1e","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":50,"start":1660755627058,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755629201,"exec_count":71,"id":"1ba837","input":"#KNN","kernel":"ds_env","pos":52,"start":1660755629157,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755630483,"exec_count":73,"id":"0eab4e","input":"# Creating the KNN model object -- we need to tell it the number of neighbors to look at.\nk = 7 #number of neighbors to look at (look at 7 nearest neighbors)\nmy_KNN_model = KNN(n_neighbors=k)","kernel":"ds_env","pos":54,"start":1660755630472,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755631169,"exec_count":74,"id":"a116e9","input":"my_KNN_model.fit(x_train, y_train) #train the model on our past results x_train (inputs) and y_train (outputs)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=7)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" checked><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=7)</pre></div></div></div></div></div>","text/plain":"KNeighborsClassifier(n_neighbors=7)"},"exec_count":74}},"pos":55,"start":1660755631146,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755631855,"exec_count":75,"id":"ad15a6","input":"y_hat = my_KNN_model.predict(x_test)","kernel":"ds_env","pos":56,"start":1660755631801,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755632373,"exec_count":76,"id":"15e4c1","input":"y_hat","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1,\n       0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1])"},"exec_count":76}},"pos":57,"start":1660755632352,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755633119,"exec_count":77,"id":"b5c596","input":"np.array(y_test)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1,\n       1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1,\n       0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0,\n       0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0])"},"exec_count":77}},"pos":58,"start":1660755633098,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755634174,"exec_count":78,"id":"a03838","input":"total_squared_error = (np.sum((y_test - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)\n","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.3923076923076923\n"}},"pos":59,"start":1660755634155,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755635363,"exec_count":79,"id":"3781ed","input":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":79},"1":{"data":{"image/png":"c5482d10198a06d5195f46ede49449105e9ef17c","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":60,"start":1660755634982,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755636665,"exec_count":80,"id":"5d5b35","input":"from sklearn.svm import SVC\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.model_selection import GridSearchCV","kernel":"ds_env","pos":62,"start":1660755636662,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755638234,"exec_count":81,"id":"0a62e2","input":"#RBF","kernel":"ds_env","pos":64,"start":1660755638226,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755641221,"exec_count":82,"id":"563984","input":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(8, 6))\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')\n","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":82},"1":{"data":{"image/png":"e42d54ba355839198b0f1feeb2b1492277dba66d","text/plain":"<Figure size 576x432 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":65,"start":1660755640978,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755668478,"exec_count":84,"id":"8e3a75","input":"fig = px.bar(df, x ='sudden weight loss', color ='Gender')\nfig.show()","kernel":"ds_env","output":{"0":{"data":{"iframe":"2f21a94a675fa03ee32d17bbd638b573933b397f"}}},"pos":1,"scrolled":true,"start":1660755668365,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755670735,"exec_count":85,"id":"1f9786","input":"fig = px.histogram(df, x ='visual blurring', color ='Gender')\nfig.show()","kernel":"ds_env","output":{"0":{"data":{"iframe":"deaf09ff3beca389e926627a8628704d0c6b18e0"}}},"pos":3,"scrolled":true,"start":1660755670614,"state":"done","type":"cell"}
{"cell_type":"code","end":1660755672867,"exec_count":86,"id":"70815d","input":"fig = px.pie(df, values ='visual blurring')\nfig.show()","kernel":"ds_env","output":{"0":{"data":{"iframe":"beeb71d66c13ff4a95493748f11892f8ddf211e0"}}},"pos":4,"start":1660755672790,"state":"done","type":"cell"}
{"cell_type":"code","end":1660759461651,"exec_count":101,"id":"075f7d","input":"# precision\nfrom sklearn.metrics import precision_score\nprecision_score(y_hat, y_test,  average=None)\n","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([0.26086957, 0.79761905])"},"exec_count":101}},"pos":61,"start":1660759461642,"state":"done","type":"cell"}
{"cell_type":"code","end":1660759591113,"exec_count":103,"id":"ad7e92","input":"# accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_hat, y_test, normalize=False)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"79"},"exec_count":103}},"pos":67,"start":1660759591091,"state":"done","type":"cell"}
{"cell_type":"code","end":1660759921208,"exec_count":107,"id":"729a4a","input":"# recall\nfrom sklearn.metrics import recall_score\nrecall_score(y_hat, y_test, average=None)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([0.4137931 , 0.66336634])"},"exec_count":107}},"pos":68,"start":1660759921192,"state":"done","type":"cell"}
{"cell_type":"code","end":1660770685434,"exec_count":180,"id":"9da828","input":"import sklearn #our favorite machine learning library\nfrom sklearn.neighbors import KNeighborsClassifier as KNN #this will import our model as KNN\nfrom sklearn.model_selection import GridSearchCV","kernel":"ds_env","pos":84,"start":1660770685430,"state":"done","type":"cell"}
{"cell_type":"code","end":1660770686407,"exec_count":181,"id":"6ae3bf","input":"# Creating the KNN model object -- we need to tell it the number of neighbors to look at.\nk = 7 #number of neighbors to look at (look at 7 nearest neighbors)\nparameters = {'n_neighbors':[3, 5, 7], 'weights': ('uniform', 'distance'), 'algorithm': ('auto', 'ball_tree')}\nmy_KNN_model = KNN()","kernel":"ds_env","pos":85,"start":1660770686387,"state":"done","type":"cell"}
{"cell_type":"code","end":1660770687191,"exec_count":182,"id":"5c7940","input":"clf = GridSearchCV(my_KNN_model, parameters)","kernel":"ds_env","pos":86,"start":1660770687158,"state":"done","type":"cell"}
{"cell_type":"code","end":1660770688585,"exec_count":183,"id":"6b3712","input":"clf.fit(x_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-12 {color: black;background-color: white;}#sk-container-id-12 pre{padding: 0;}#sk-container-id-12 div.sk-toggleable {background-color: white;}#sk-container-id-12 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-12 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-12 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-12 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-12 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-12 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-12 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-12 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-12 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-12 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-12 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-12 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-12 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-12 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-12 div.sk-item {position: relative;z-index: 1;}#sk-container-id-12 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-12 div.sk-item::before, #sk-container-id-12 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-12 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-12 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-12 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-12 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-12 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-12 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-12 div.sk-label-container {text-align: center;}#sk-container-id-12 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-12 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-12\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=KNeighborsClassifier(),\n             param_grid={&#x27;algorithm&#x27;: (&#x27;auto&#x27;, &#x27;ball_tree&#x27;),\n                         &#x27;n_neighbors&#x27;: [3, 5, 7],\n                         &#x27;weights&#x27;: (&#x27;uniform&#x27;, &#x27;distance&#x27;)})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-32\" type=\"checkbox\" ><label for=\"sk-estimator-id-32\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=KNeighborsClassifier(),\n             param_grid={&#x27;algorithm&#x27;: (&#x27;auto&#x27;, &#x27;ball_tree&#x27;),\n                         &#x27;n_neighbors&#x27;: [3, 5, 7],\n                         &#x27;weights&#x27;: (&#x27;uniform&#x27;, &#x27;distance&#x27;)})</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-33\" type=\"checkbox\" ><label for=\"sk-estimator-id-33\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-34\" type=\"checkbox\" ><label for=\"sk-estimator-id-34\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div></div></div></div></div></div>","text/plain":"GridSearchCV(estimator=KNeighborsClassifier(),\n             param_grid={'algorithm': ('auto', 'ball_tree'),\n                         'n_neighbors': [3, 5, 7],\n                         'weights': ('uniform', 'distance')})"},"exec_count":183}},"pos":87,"start":1660770688139,"state":"done","type":"cell"}
{"cell_type":"code","end":1660770689832,"exec_count":184,"id":"a96c03","input":"clf.best_params_","kernel":"ds_env","output":{"0":{"data":{"text/plain":"{'algorithm': 'ball_tree', 'n_neighbors': 3, 'weights': 'uniform'}"},"exec_count":184}},"pos":88,"start":1660770689794,"state":"done","type":"cell"}
{"cell_type":"code","end":1660770690671,"exec_count":185,"id":"76c2dc","input":"clf.best_score_","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.5538461538461539"},"exec_count":185}},"pos":89,"start":1660770690666,"state":"done","type":"cell"}
{"cell_type":"code","end":1660770690862,"exec_count":186,"id":"6f471c","input":"pred = clf.predict(x_test)","kernel":"ds_env","pos":90,"start":1660770690845,"state":"done","type":"cell"}
{"cell_type":"code","end":1660770691718,"exec_count":187,"id":"56b222","input":"(pred == y_test).mean()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0.5307692307692308"},"exec_count":187}},"pos":91,"start":1660770691713,"state":"done","type":"cell"}
{"cell_type":"code","end":1660770692879,"exec_count":188,"id":"2775f9","input":"total_squared_error = (np.sum((y_test - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)\n","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.3923076923076923\n"}},"pos":92,"start":1660770692860,"state":"done","type":"cell"}
{"cell_type":"code","end":1660770693973,"exec_count":189,"id":"d28d0f","input":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_hat), annot=True, fmt='g')\n","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":189},"1":{"data":{"image/png":"c5482d10198a06d5195f46ede49449105e9ef17c","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":93,"start":1660770693750,"state":"done","type":"cell"}
{"cell_type":"code","end":1660771926765,"exec_count":241,"id":"50e1e3","input":"import sklearn\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test ,y_train, y_test = train_test_split(X, Y)\n","kernel":"ds_env","pos":76,"start":1660771926741,"state":"done","type":"cell"}
{"cell_type":"code","end":1660771927153,"exec_count":242,"id":"d8c2cb","input":"print(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"(390, 9)\n(130, 9)\n(390,)\n(130,)\n"}},"pos":77,"start":1660771927142,"state":"done","type":"cell"}
{"cell_type":"code","end":1660771929768,"exec_count":243,"id":"d222c3","input":"x_test.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Polyuria</th>\n      <th>Polydipsia</th>\n      <th>sudden weight loss</th>\n      <th>Polyphagia</th>\n      <th>visual blurring</th>\n      <th>Irritability</th>\n      <th>partial paresis</th>\n      <th>Alopecia</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>299</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>433</th>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>179</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>243</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"     Gender  Polyuria  Polydipsia  sudden weight loss  Polyphagia  \\\n299       0         1           1                   1           1   \n53        0         0           1                   1           0   \n433       1         0           1                   0           0   \n179       0         1           1                   1           1   \n243       1         0           0                   0           0   \n\n     visual blurring  Irritability  partial paresis  Alopecia  \n299                1             0                1         0  \n53                 1             0                0         0  \n433                0             0                0         1  \n179                0             0                1         0  \n243                0             0                0         0  "},"exec_count":243}},"pos":78,"start":1660771929755,"state":"done","type":"cell"}
{"cell_type":"code","end":1660771932469,"exec_count":244,"id":"a46f63","input":" y_train.head()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"104    1\n50     1\n375    0\n356    0\n296    1\nName: class, dtype: int64"},"exec_count":244}},"pos":81,"start":1660771932442,"state":"done","type":"cell"}
{"cell_type":"code","end":1660771932710,"exec_count":245,"id":"3561f8","input":"y_test.head","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<bound method NDFrame.head of 299    1\n53     1\n433    1\n179    1\n243    0\n      ..\n144    1\n271    1\n423    1\n84     1\n327    0\nName: class, Length: 130, dtype: int64>"},"exec_count":245}},"pos":82,"start":1660771932653,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":100,"id":"694191","input":"# precision\nfrom sklearn.metrics import precision_score\nprecision_score(y_hat, y_test,  average=None)\n","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([0.26086957, 0.79761905])"},"exec_count":100}},"pos":51,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":102,"id":"56f823","input":"# precision\nfrom sklearn.metrics import precision_score\nprecision_score(y_hat, y_test,  average=None)\n","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([0.26086957, 0.79761905])"},"exec_count":102}},"pos":66,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":59,"id":"b5b0f2","input":"from sklearn.datasets import load_iris\nfrom sklearn.linear_model import LogisticRegression\n","kernel":"ds_env","pos":38,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":72,"id":"fd46d6","input":"import sklearn #our favorite machine learning library\nfrom sklearn.neighbors import KNeighborsClassifier as KNN #this will import our model as KNN","kernel":"ds_env","pos":53,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":83,"id":"682080","input":"#Logistic regression\n#svmrbf and svm linear\n#knn\n#naive bayes\n#Decision trees\n#Random forest\n\nprecision, accuracy, recall","kernel":"ds_env","pos":72,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":99,"id":"526811","input":"#precision\nfrom sklearn.metrics import precision_score\nprecision_score(y_hat, y_test,  average=None)\n","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([0.26086957, 0.79761905])"},"exec_count":99}},"pos":43,"state":"done","type":"cell"}
{"cell_type":"code","id":"040e5a","input":"","pos":10,"type":"cell"}
{"cell_type":"code","id":"05281a","input":"#KNN","pos":83,"type":"cell"}
{"cell_type":"code","id":"159137","input":"","pos":75,"type":"cell"}
{"cell_type":"code","id":"16b339","input":"","pos":32,"type":"cell"}
{"cell_type":"code","id":"2f35c2","input":"","pos":79,"type":"cell"}
{"cell_type":"code","id":"335c51","input":"","pos":74,"type":"cell"}
{"cell_type":"code","id":"3a2654","input":"","pos":70,"type":"cell"}
{"cell_type":"code","id":"5d1418","input":"","pos":95,"type":"cell"}
{"cell_type":"code","id":"799ef8","input":"","pos":80,"type":"cell"}
{"cell_type":"code","id":"8711fc","input":"","pos":48,"type":"cell"}
{"cell_type":"code","id":"9045f9","input":"","pos":22,"type":"cell"}
{"cell_type":"code","id":"935370","input":"","pos":16,"type":"cell"}
{"cell_type":"code","id":"a17197","input":"\n","pos":71,"type":"cell"}
{"cell_type":"code","id":"a2c269","input":"","pos":73,"type":"cell"}
{"cell_type":"code","id":"ae649e","input":"","pos":94,"type":"cell"}
{"cell_type":"code","id":"b24ae0","input":"","pos":36,"type":"cell"}
{"cell_type":"code","id":"c4b182","input":"","pos":2,"type":"cell"}
{"cell_type":"code","id":"de1b97","input":"","pos":23,"type":"cell"}
{"cell_type":"code","id":"e6b96e","input":"","pos":9,"type":"cell"}
{"cell_type":"code","id":"eaa7fa","input":"","pos":8,"type":"cell"}
{"cell_type":"code","id":"eb1172","input":"","pos":63,"type":"cell"}
{"cell_type":"code","id":"f34b06","input":"","pos":69,"type":"cell"}
{"cell_type":"code","id":"f95af9","input":"","pos":7,"type":"cell"}
{"cell_type":"code","id":"f9804b","input":"","pos":26,"type":"cell"}
{"cell_type":"code","id":"ff3350","input":"","pos":25,"type":"cell"}
{"end":1660759623959,"exec_count":104,"id":"54c259","input":"# accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_hat, y_test, normalize=False)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"79"},"exec_count":104}},"pos":61.5,"start":1660759623946,"state":"done","type":"cell"}
{"end":1660759636196,"exec_count":105,"id":"90e984","input":"# accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_hat, y_test, normalize=False)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"79"},"exec_count":105}},"pos":51.5,"start":1660759636190,"state":"done","type":"cell"}
{"end":1660759648358,"exec_count":106,"id":"70f56b","input":"# accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_hat, y_test, normalize=False)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"79"},"exec_count":106}},"pos":43.5,"start":1660759648350,"state":"done","type":"cell"}
{"end":1660760029257,"exec_count":108,"id":"67961a","input":"# recall\nfrom sklearn.metrics import recall_score\nrecall_score(y_hat, y_test, average=None)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([0.4137931 , 0.66336634])"},"exec_count":108}},"pos":61.75,"start":1660760029226,"state":"done","type":"cell"}
{"end":1660760058328,"exec_count":109,"id":"9449b5","input":"# recall\nfrom sklearn.metrics import recall_score\nrecall_score(y_hat, y_test, average=None)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([0.4137931 , 0.66336634])"},"exec_count":109}},"pos":51.75,"start":1660760058299,"state":"done","type":"cell"}
{"end":1660760079120,"exec_count":110,"id":"d9a665","input":"# recall\nfrom sklearn.metrics import recall_score\nrecall_score(y_hat, y_test, average=None)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([0.4137931 , 0.66336634])"},"exec_count":110}},"pos":43.75,"start":1660760079083,"state":"done","type":"cell"}
{"end":1660772835230,"exec_count":279,"id":"def998","input":"#SVM linear","kernel":"ds_env","pos":96,"start":1660772835213,"state":"done","type":"cell"}
{"end":1660773106889,"exec_count":285,"id":"d9bc80","input":"from sklearn.svm import LinearSVC\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.datasets import make_classification\nfrom sklearn.model_selection import GridSearchCV","kernel":"ds_env","pos":97,"start":1660773106882,"state":"done","type":"cell"}
{"end":1660773591446,"exec_count":289,"id":"abfa55","input":"clf = make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))\nparameters = {'loss':['hinge','squared_hinge'], 'dual':['True']}\nmy_svm_model = LinearSVC()\n","kernel":"ds_env","pos":97.25,"start":1660773591426,"state":"done","type":"cell"}
{"end":1660773594411,"exec_count":290,"id":"7a386e","input":"clf = GridSearchCV(my_svm_model, parameters)","kernel":"ds_env","pos":97.5,"start":1660773594397,"state":"done","type":"cell"}
{"end":1660773594594,"exec_count":291,"id":"6d733b","input":"clf.fit(x_train, y_train)","kernel":"ds_env","output":{"0":{"ename":"ValueError","evalue":"\nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n5 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/svm/_classes.py\", line 257, in fit\n    self.coef_, self.intercept_, n_iter_ = _fit_liblinear(\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/svm/_base.py\", line 1204, in _fit_liblinear\n    solver_type = _get_liblinear_solver_type(multi_class, penalty, loss, dual)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/svm/_base.py\", line 1043, in _get_liblinear_solver_type\n    raise ValueError(\nValueError: Unsupported set of arguments: The combination of penalty='l2' and loss='hinge' are not supported when dual=True, Parameters: penalty='l2', loss='hinge', dual='True'\n\n--------------------------------------------------------------------------------\n5 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/svm/_classes.py\", line 257, in fit\n    self.coef_, self.intercept_, n_iter_ = _fit_liblinear(\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/svm/_base.py\", line 1204, in _fit_liblinear\n    solver_type = _get_liblinear_solver_type(multi_class, penalty, loss, dual)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/svm/_base.py\", line 1043, in _get_liblinear_solver_type\n    raise ValueError(\nValueError: Unsupported set of arguments: The combination of penalty='l2' and loss='squared_hinge' are not supported when dual=True, Parameters: penalty='l2', loss='squared_hinge', dual='True'\n","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Input \u001b[0;32mIn [291]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mclf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_search.py:875\u001b[0m, in \u001b[0;36mBaseSearchCV.fit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    869\u001b[0m     results \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_format_results(\n\u001b[1;32m    870\u001b[0m         all_candidate_params, n_splits, all_out, all_more_results\n\u001b[1;32m    871\u001b[0m     )\n\u001b[1;32m    873\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m results\n\u001b[0;32m--> 875\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_run_search\u001b[49m\u001b[43m(\u001b[49m\u001b[43mevaluate_candidates\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    877\u001b[0m \u001b[38;5;66;03m# multimetric is determined here because in the case of a callable\u001b[39;00m\n\u001b[1;32m    878\u001b[0m \u001b[38;5;66;03m# self.scoring the return type is only known after calling\u001b[39;00m\n\u001b[1;32m    879\u001b[0m first_test_score \u001b[38;5;241m=\u001b[39m all_out[\u001b[38;5;241m0\u001b[39m][\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtest_scores\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_search.py:1375\u001b[0m, in \u001b[0;36mGridSearchCV._run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1373\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_run_search\u001b[39m(\u001b[38;5;28mself\u001b[39m, evaluate_candidates):\n\u001b[1;32m   1374\u001b[0m     \u001b[38;5;124;03m\"\"\"Search all candidates in param_grid\"\"\"\u001b[39;00m\n\u001b[0;32m-> 1375\u001b[0m     \u001b[43mevaluate_candidates\u001b[49m\u001b[43m(\u001b[49m\u001b[43mParameterGrid\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mparam_grid\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_search.py:852\u001b[0m, in \u001b[0;36mBaseSearchCV.fit.<locals>.evaluate_candidates\u001b[0;34m(candidate_params, cv, more_results)\u001b[0m\n\u001b[1;32m    845\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(out) \u001b[38;5;241m!=\u001b[39m n_candidates \u001b[38;5;241m*\u001b[39m n_splits:\n\u001b[1;32m    846\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    847\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcv.split and cv.get_n_splits returned \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    848\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124minconsistent results. Expected \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    849\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msplits, got \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(n_splits, \u001b[38;5;28mlen\u001b[39m(out) \u001b[38;5;241m/\u001b[39m\u001b[38;5;241m/\u001b[39m n_candidates)\n\u001b[1;32m    850\u001b[0m     )\n\u001b[0;32m--> 852\u001b[0m \u001b[43m_warn_or_raise_about_fit_failures\u001b[49m\u001b[43m(\u001b[49m\u001b[43mout\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43merror_score\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    854\u001b[0m \u001b[38;5;66;03m# For callable self.scoring, the return type is only know after\u001b[39;00m\n\u001b[1;32m    855\u001b[0m \u001b[38;5;66;03m# calling. If the return type is a dictionary, the error scores\u001b[39;00m\n\u001b[1;32m    856\u001b[0m \u001b[38;5;66;03m# can now be inserted with the correct key. The type checking\u001b[39;00m\n\u001b[1;32m    857\u001b[0m \u001b[38;5;66;03m# of out will be done in `_insert_error_scores`.\u001b[39;00m\n\u001b[1;32m    858\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m callable(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mscoring):\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:367\u001b[0m, in \u001b[0;36m_warn_or_raise_about_fit_failures\u001b[0;34m(results, error_score)\u001b[0m\n\u001b[1;32m    360\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m num_failed_fits \u001b[38;5;241m==\u001b[39m num_fits:\n\u001b[1;32m    361\u001b[0m     all_fits_failed_message \u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m    362\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124mAll the \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mnum_fits\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m fits failed.\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    363\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mIt is very likely that your model is misconfigured.\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    364\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mYou can try to debug the error by setting error_score=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mraise\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m.\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    365\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mBelow are more details about the failures:\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;132;01m{\u001b[39;00mfit_errors_summary\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    366\u001b[0m     )\n\u001b[0;32m--> 367\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(all_fits_failed_message)\n\u001b[1;32m    369\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    370\u001b[0m     some_fits_failed_message \u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m    371\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;132;01m{\u001b[39;00mnum_failed_fits\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m fits failed out of a total of \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mnum_fits\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    372\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mThe score on these train-test partitions for these parameters\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    376\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mBelow are more details about the failures:\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;132;01m{\u001b[39;00mfit_errors_summary\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    377\u001b[0m     )\n","\u001b[0;31mValueError\u001b[0m: \nAll the 10 fits failed.\nIt is very likely that your model is misconfigured.\nYou can try to debug the error by setting error_score='raise'.\n\nBelow are more details about the failures:\n--------------------------------------------------------------------------------\n5 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/svm/_classes.py\", line 257, in fit\n    self.coef_, self.intercept_, n_iter_ = _fit_liblinear(\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/svm/_base.py\", line 1204, in _fit_liblinear\n    solver_type = _get_liblinear_solver_type(multi_class, penalty, loss, dual)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/svm/_base.py\", line 1043, in _get_liblinear_solver_type\n    raise ValueError(\nValueError: Unsupported set of arguments: The combination of penalty='l2' and loss='hinge' are not supported when dual=True, Parameters: penalty='l2', loss='hinge', dual='True'\n\n--------------------------------------------------------------------------------\n5 fits failed with the following error:\nTraceback (most recent call last):\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n    estimator.fit(X_train, y_train, **fit_params)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/svm/_classes.py\", line 257, in fit\n    self.coef_, self.intercept_, n_iter_ = _fit_liblinear(\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/svm/_base.py\", line 1204, in _fit_liblinear\n    solver_type = _get_liblinear_solver_type(multi_class, penalty, loss, dual)\n  File \"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/svm/_base.py\", line 1043, in _get_liblinear_solver_type\n    raise ValueError(\nValueError: Unsupported set of arguments: The combination of penalty='l2' and loss='squared_hinge' are not supported when dual=True, Parameters: penalty='l2', loss='squared_hinge', dual='True'\n"]}},"pos":98,"start":1660773594479,"state":"done","type":"cell"}
{"id":"1c1bfa","input":"","pos":38.5,"type":"cell"}
{"id":"2be201","input":"clf.best_params_","kernel":"ds_env","pos":98.5,"type":"cell"}
{"id":"306f0d","input":"","kernel":"ds_env","pos":98.25,"type":"cell"}
{"id":"334c66","input":"","pos":102,"type":"cell"}
{"id":"53f52e","input":"","pos":82.5,"type":"cell"}
{"id":"62f91a","input":"","pos":101,"type":"cell"}
{"id":"651505","input":"(make_pipeline(StandardScaler(),LinearSVC(random_state=0, tol=1e-5))","kernel":"ds_env","pos":99,"type":"cell"}
{"id":"7af958","input":"","pos":43.875,"type":"cell"}
{"id":"99e966","input":"","pos":61.875,"type":"cell"}
{"id":"9c8ffb","input":"","kernel":"ds_env","pos":97.125,"type":"cell"}
{"id":"9e4995","input":"","pos":99.9375,"type":"cell"}
{"id":"ab39af","input":", tol=0.0001, C=1.0, multi_class='ovr', fit_intercept=True, intercept_scaling=1, class_weight=None, verbose=0, random_state=None, max_iter=1000)","pos":99.5,"type":"cell"}
{"id":"ba5dfb","input":"","pos":82.75,"type":"cell"}
{"id":"bbdc9e","input":"","pos":99.875,"type":"cell"}
{"id":"bc72f0","input":"","pos":100,"type":"cell"}
{"id":"c376c1","input":"","pos":51.875,"type":"cell"}
{"id":"c90615","input":"clf.best_score_","kernel":"ds_env","pos":98.75,"type":"cell"}
{"id":"ea4192","input":"","pos":82.875,"type":"cell"}
{"id":"fbaca7","input":"","pos":99.75,"type":"cell"}
{"id":0,"time":1660755416776,"type":"user"}
{"last_load":1660755414918,"type":"file"}