{"backend_state":"running","connection_file":"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/.local/share/jupyter/runtime/kernel-f724a7f5-4db6-4656-987c-32c8559b780e.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1661371527738,"exec_count":205,"id":"358cd7","input":"import pandas as pd\nimport numpy as np\nimport plotly.express as px","kernel":"ds_env","pos":0,"start":1661371527717,"state":"done","type":"cell"}
{"cell_type":"code","end":1661371528682,"exec_count":206,"id":"28f398","input":"df = pd.read_csv('diabetes_data_upload.csv')\n","kernel":"ds_env","pos":1,"start":1661371528676,"state":"done","type":"cell"}
{"cell_type":"code","end":1661371532114,"exec_count":207,"id":"530af7","input":"df.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Gender</th>\n      <th>Polyuria</th>\n      <th>Polydipsia</th>\n      <th>sudden weight loss</th>\n      <th>weakness</th>\n      <th>Polyphagia</th>\n      <th>Genital thrush</th>\n      <th>visual blurring</th>\n      <th>Itching</th>\n      <th>Irritability</th>\n      <th>delayed healing</th>\n      <th>partial paresis</th>\n      <th>muscle stiffness</th>\n      <th>Alopecia</th>\n      <th>Obesity</th>\n      <th>class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>40</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Positive</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>58</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Positive</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>41</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Positive</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>45</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>No</td>\n      <td>Positive</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>60</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>No</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Yes</td>\n      <td>Positive</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   Age Gender Polyuria Polydipsia sudden weight loss weakness Polyphagia  \\\n0   40   Male       No        Yes                 No      Yes         No   \n1   58   Male       No         No                 No      Yes         No   \n2   41   Male      Yes         No                 No      Yes        Yes   \n3   45   Male       No         No                Yes      Yes        Yes   \n4   60   Male      Yes        Yes                Yes      Yes        Yes   \n\n  Genital thrush visual blurring Itching Irritability delayed healing  \\\n0             No              No     Yes           No             Yes   \n1             No             Yes      No           No              No   \n2             No              No     Yes           No             Yes   \n3            Yes              No     Yes           No             Yes   \n4             No             Yes     Yes          Yes             Yes   \n\n  partial paresis muscle stiffness Alopecia Obesity     class  \n0              No              Yes      Yes     Yes  Positive  \n1             Yes               No      Yes      No  Positive  \n2              No              Yes      Yes      No  Positive  \n3              No               No       No      No  Positive  \n4             Yes              Yes      Yes     Yes  Positive  "},"exec_count":207}},"pos":2,"start":1661371532100,"state":"done","type":"cell"}
{"cell_type":"code","end":1661371532237,"exec_count":208,"id":"0944d3","input":"results = []\nfor col in df.columns:\n    missing_or_not = df[col].isnull().values.any()\n    print(col + ' ' + str(missing_or_not))","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Age False\nGender False\nPolyuria False\nPolydipsia False\nsudden weight loss False\nweakness False\nPolyphagia False\nGenital thrush False\nvisual blurring False\nItching False\nIrritability False\ndelayed healing False\npartial paresis False\nmuscle stiffness False\nAlopecia False\nObesity False\nclass False\n"}},"pos":3,"start":1661371532216,"state":"done","type":"cell"}
{"cell_type":"code","end":1661371533235,"exec_count":209,"id":"5667e9","input":"def convert(x):\n    if x == 'Yes' or x == 'Male' or x == 'Positive':\n        return 1\n    else:\n        return 0","kernel":"ds_env","pos":4,"start":1661371533229,"state":"done","type":"cell"}
{"cell_type":"code","end":1661371533932,"exec_count":210,"id":"eb57ed","input":"df['Gender'].apply(convert)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0      1\n1      1\n2      1\n3      1\n4      1\n      ..\n515    0\n516    0\n517    0\n518    0\n519    1\nName: Gender, Length: 520, dtype: int64"},"exec_count":210}},"pos":5,"start":1661371533923,"state":"done","type":"cell"}
{"cell_type":"code","end":1661371534909,"exec_count":211,"id":"6fd0e9","input":"df['Gender']","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0        Male\n1        Male\n2        Male\n3        Male\n4        Male\n        ...  \n515    Female\n516    Female\n517    Female\n518    Female\n519      Male\nName: Gender, Length: 520, dtype: object"},"exec_count":211}},"pos":6,"start":1661371534901,"state":"done","type":"cell"}
{"cell_type":"code","end":1661371535692,"exec_count":212,"id":"d9f181","input":"for col in df.columns:\n    if col != 'Age':\n        df[col] = df[col].apply(convert)","kernel":"ds_env","pos":7,"start":1661371535666,"state":"done","type":"cell"}
{"cell_type":"code","end":1661371536309,"exec_count":213,"id":"84ea4e","input":"Drop_Columns = ['class', 'Age', 'weakness', 'Genital thrush', 'Itching', 'delayed healing', 'muscle stiffness', 'Obesity']\nx = df.drop(Drop_Columns,axis=1)\ny = df['class']\n","kernel":"ds_env","pos":8,"start":1661371536301,"state":"done","type":"cell"}
{"cell_type":"code","end":1661371537129,"exec_count":214,"id":"948e24","input":"import sklearn\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test ,y_train, y_test = train_test_split(x, y)","kernel":"ds_env","pos":9,"start":1661371537122,"state":"done","type":"cell"}
{"cell_type":"code","end":1661371537840,"exec_count":215,"id":"658832","input":"print(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"(390, 9)\n(130, 9)\n(390,)\n(130,)\n"}},"pos":10,"start":1661371537831,"state":"done","type":"cell"}
{"cell_type":"code","end":1661371538712,"exec_count":216,"id":"63eff9","input":"x_test.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Polyuria</th>\n      <th>Polydipsia</th>\n      <th>sudden weight loss</th>\n      <th>Polyphagia</th>\n      <th>visual blurring</th>\n      <th>Irritability</th>\n      <th>partial paresis</th>\n      <th>Alopecia</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>177</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>343</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>401</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>64</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>120</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"     Gender  Polyuria  Polydipsia  sudden weight loss  Polyphagia  \\\n177       0         1           1                   1           1   \n343       0         0           0                   1           1   \n401       1         0           0                   0           0   \n64        0         0           0                   0           0   \n120       1         1           1                   0           1   \n\n     visual blurring  Irritability  partial paresis  Alopecia  \n177                0             0                1         0  \n343                0             0                0         0  \n401                0             0                0         0  \n64                 1             0                1         0  \n120                0             0                0         1  "},"exec_count":216}},"pos":11,"start":1661371538701,"state":"done","type":"cell"}
{"cell_type":"code","end":1661371539439,"exec_count":217,"id":"d122a7","input":" y_train.head()","kernel":"ds_env","output":{"0":{"data":{"text/plain":"26     1\n272    0\n487    1\n179    1\n67     1\nName: class, dtype: int64"},"exec_count":217}},"pos":12,"start":1661371539431,"state":"done","type":"cell"}
{"cell_type":"code","end":1661371540011,"exec_count":218,"id":"ac6fab","input":"y_test.head","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<bound method NDFrame.head of 177    1\n343    1\n401    0\n64     1\n120    1\n      ..\n74     1\n290    0\n398    0\n461    0\n104    1\nName: class, Length: 130, dtype: int64>"},"exec_count":218}},"pos":13,"start":1661371539996,"state":"done","type":"cell"}
{"cell_type":"code","end":1661371555346,"exec_count":227,"id":"b20132","input":"# Plug in converted values into our best ml model, aka decision tree\n","kernel":"ds_env","pos":20,"start":1661371555337,"state":"done","type":"cell"}
{"cell_type":"code","end":1661371559064,"exec_count":230,"id":"2c9804","input":"df.tail()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Gender</th>\n      <th>Polyuria</th>\n      <th>Polydipsia</th>\n      <th>sudden weight loss</th>\n      <th>weakness</th>\n      <th>Polyphagia</th>\n      <th>Genital thrush</th>\n      <th>visual blurring</th>\n      <th>Itching</th>\n      <th>Irritability</th>\n      <th>delayed healing</th>\n      <th>partial paresis</th>\n      <th>muscle stiffness</th>\n      <th>Alopecia</th>\n      <th>Obesity</th>\n      <th>class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>515</th>\n      <td>39</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>516</th>\n      <td>48</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>517</th>\n      <td>58</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>518</th>\n      <td>32</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>519</th>\n      <td>42</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"     Age  Gender  Polyuria  Polydipsia  sudden weight loss  weakness  \\\n515   39       0         1           1                   1         0   \n516   48       0         1           1                   1         1   \n517   58       0         1           1                   1         1   \n518   32       0         0           0                   0         1   \n519   42       1         0           0                   0         0   \n\n     Polyphagia  Genital thrush  visual blurring  Itching  Irritability  \\\n515           1               0                0        1             0   \n516           1               0                0        1             1   \n517           1               0                1        0             0   \n518           0               0                1        1             0   \n519           0               0                0        0             0   \n\n     delayed healing  partial paresis  muscle stiffness  Alopecia  Obesity  \\\n515                1                1                 0         0        0   \n516                1                1                 0         0        0   \n517                0                1                 1         0        1   \n518                1                0                 0         1        0   \n519                0                0                 0         0        0   \n\n     class  \n515      1  \n516      1  \n517      1  \n518      0  \n519      0  "},"exec_count":230}},"pos":23,"start":1661371559055,"state":"done","type":"cell"}
{"cell_type":"code","end":1661371664190,"exec_count":232,"id":"8fc7f9","input":"#Decision tress: Decision Trees are a non-parametric supervised learning method used for classification and regression. The model can predict the value of a target variable by learning simple rules. The more data, the more complex the decision rules and the fitter the model.\nfrom sklearn import tree\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import confusion_matrix\n\nparameters = {'criterion' :('gini', 'entropy', 'log_loss'), 'splitter' :('best', 'random')}\n\n","kernel":"ds_env","pos":15,"start":1661371664181,"state":"done","type":"cell"}
{"cell_type":"code","end":1661371666010,"exec_count":234,"id":"c07f41","input":"clf = GridSearchCV(tree.DecisionTreeClassifier(), parameters)\nclf.fit(x_train, y_train)\n","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-11 {color: black;background-color: white;}#sk-container-id-11 pre{padding: 0;}#sk-container-id-11 div.sk-toggleable {background-color: white;}#sk-container-id-11 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-11 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-11 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-11 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-11 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-11 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-11 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-11 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-11 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-11 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-11 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-11 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-11 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-11 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-11 div.sk-item {position: relative;z-index: 1;}#sk-container-id-11 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-11 div.sk-item::before, #sk-container-id-11 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-11 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-11 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-11 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-11 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-11 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-11 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-11 div.sk-label-container {text-align: center;}#sk-container-id-11 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-11 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-11\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=DecisionTreeClassifier(),\n             param_grid={&#x27;criterion&#x27;: (&#x27;gini&#x27;, &#x27;entropy&#x27;, &#x27;log_loss&#x27;),\n                         &#x27;splitter&#x27;: (&#x27;best&#x27;, &#x27;random&#x27;)})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-31\" type=\"checkbox\" ><label for=\"sk-estimator-id-31\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=DecisionTreeClassifier(),\n             param_grid={&#x27;criterion&#x27;: (&#x27;gini&#x27;, &#x27;entropy&#x27;, &#x27;log_loss&#x27;),\n                         &#x27;splitter&#x27;: (&#x27;best&#x27;, &#x27;random&#x27;)})</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-32\" type=\"checkbox\" ><label for=\"sk-estimator-id-32\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-33\" type=\"checkbox\" ><label for=\"sk-estimator-id-33\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div></div></div></div></div></div>","text/plain":"GridSearchCV(estimator=DecisionTreeClassifier(),\n             param_grid={'criterion': ('gini', 'entropy', 'log_loss'),\n                         'splitter': ('best', 'random')})"},"exec_count":234}},"pos":16,"start":1661371665779,"state":"done","type":"cell"}
{"cell_type":"code","end":1661371666381,"exec_count":235,"id":"d35626","input":"clf.best_params_\n","kernel":"ds_env","output":{"0":{"data":{"text/plain":"{'criterion': 'entropy', 'splitter': 'random'}"},"exec_count":235}},"pos":17,"start":1661371666377,"state":"done","type":"cell"}
{"cell_type":"code","end":1661371667071,"exec_count":236,"id":"d5c7e0","input":"y_hat = clf.predict(x_test)\ny_hat\n","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1,\n       0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0,\n       0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0,\n       1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0,\n       1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1,\n       0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1])"},"exec_count":236}},"pos":18,"start":1661371667059,"state":"done","type":"cell"}
{"cell_type":"code","end":1661371667791,"exec_count":237,"id":"355b14","input":"fig = px.imshow(confusion_matrix(y_test, y_hat), text_auto=True)\n\nfig.write_html(\"DecisionTrees.html\")\nfig.show()\n","kernel":"ds_env","output":{"0":{"data":{"iframe":"d430b0e525fb3e0922d9ea35e34ab9663464461a"}}},"pos":19,"start":1661371667710,"state":"done","type":"cell"}
{"cell_type":"code","end":1661371964196,"exec_count":239,"id":"4d6b81","input":"predict(features)\n","kernel":"ds_env","output":{"0":{"name":"stdout","text":"You have Diabetes. Please seek medical attention from a professional\n"},"1":{"name":"stderr","text":"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/base.py:450: UserWarning:\n\nX does not have valid feature names, but DecisionTreeClassifier was fitted with feature names\n\n"},"2":{"ename":"ValueError","evalue":"The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Input \u001b[0;32mIn [239]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mpredict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfeatures\u001b[49m\u001b[43m)\u001b[49m\n","Input \u001b[0;32mIn [238]\u001b[0m, in \u001b[0;36mpredict\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m prediction \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m      5\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mYou have Diabetes. Please seek medical attention from a professional\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m----> 6\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m features \u001b[38;5;241m==\u001b[39m np\u001b[38;5;241m.\u001b[39marray([[\u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m0\u001b[39m]]):\n\u001b[1;32m      7\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mYou do not have diabetes. I hope you still enjoyed our project :)\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m features \u001b[38;5;241m==\u001b[39m np\u001b[38;5;241m.\u001b[39marray([[\u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m1\u001b[39m, \u001b[38;5;241m1\u001b[39m]]):\n","\u001b[0;31mValueError\u001b[0m: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()"]}},"pos":22,"start":1661371964171,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"03f032","input":"","pos":27,"type":"cell"}
{"cell_type":"code","id":"091ba1","input":"","pos":24,"type":"cell"}
{"cell_type":"code","id":"227d88","input":"\n","kernel":"ds_env","pos":21,"type":"cell"}
{"cell_type":"code","id":"71e539","input":"","pos":25,"type":"cell"}
{"cell_type":"code","id":"7b9f27","input":"\n\n","pos":14,"type":"cell"}
{"cell_type":"code","id":"847a6b","input":"","pos":26,"type":"cell"}
{"end":1661371546560,"exec_count":225,"id":"dda505","input":"def convert(x):\n    if x == 'Yes'or x == 'Male':\n        return 1\n    else:\n        return 0\nconvert('Female')\n\n","kernel":"ds_env","output":{"0":{"data":{"text/plain":"0"},"exec_count":225}},"pos":19.5,"start":1661371546548,"state":"done","type":"cell"}
{"end":1661371548011,"exec_count":226,"id":"7e4fea","input":"import numpy as np\n\ndef convert(x):\n    if x == 'Yes'or x == 'Male':\n        return 1\n    else:\n        return 0\nconvert('No')\n\nmy_list = [x]\nmy_array = np.array(my_list)\n# printing the type of my_array\nprint(my_array)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"[[[1 0 1 ... 0 0 1]\n  [1 0 0 ... 0 1 1]\n  [1 1 0 ... 0 0 1]\n  ...\n  [0 1 1 ... 0 1 0]\n  [0 0 0 ... 0 0 1]\n  [1 0 0 ... 0 0 0]]]\n"}},"pos":19.875,"start":1661371548003,"state":"done","type":"cell"}
{"end":1661371665281,"exec_count":233,"id":"e96e10","input":"total_squared_error = (np.sum((y_test - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.015384615384615385\n"}},"pos":15.75,"start":1661371665270,"state":"done","type":"cell"}
{"end":1661371961360,"exec_count":238,"id":"745351","input":"features = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0]])\ndef predict(x):\n    prediction = clf.predict(x)\n    if prediction == 1:\n        print('You have Diabetes. Please seek medical attention from a professional')\n    if features == np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0]]):\n        print('You do not have diabetes. I hope you still enjoyed our project :)')\n    if features == np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1]]):\n        print('You have Diabetes. Please seek medical attention from a professional')\n    else:\n        print('You do not have diabetes. I hope you still enjoyed our project :)')","kernel":"ds_env","pos":21.5,"start":1661371961357,"state":"done","type":"cell"}
{"end":1661374857022,"exec_count":285,"id":"5853f9","input":"Gender = str(input('Gender: '))\nPolyuria = str(input('Polyuria: '))\nPolydipsia = str(input('Polydipsia: '))\nsudden_weight_loss = str(input('Sudden Weight Loss: '))\nPolyphagia = str(input('Polyphagia: '))\nVisual_Blurring = str(input('Visual Blurring: '))\nIrritability = str(input('Irritability: '))\nPartial_Paresis = str(input('Partial Paresis: '))\nAlopecia = str(input('Alopecia: '))\n\n\nprint(Gender, Polyuria, Polydipsia,  sudden_weight_loss, Polyphagia, Visual_Blurring, Irritability, Partial_Paresis, Alopecia)","kernel":"ds_env","output":{"0":{"name":"input","opts":{"password":false,"prompt":"Gender: "},"value":"Male"},"1":{"name":"input","opts":{"password":false,"prompt":"Polyuria: "},"value":"Yes"},"2":{"name":"input","opts":{"password":false,"prompt":"Polydipsia: "},"value":"No"},"3":{"name":"input","opts":{"password":false,"prompt":"Sudden Weight Loss: "},"value":"Yes"},"4":{"name":"input","opts":{"password":false,"prompt":"Polyphagia: "},"value":"No"},"5":{"name":"input","opts":{"password":false,"prompt":"Visual Blurring: "},"value":"Yes"},"6":{"name":"input","opts":{"password":false,"prompt":"Irritability: "},"value":"Yes"},"7":{"name":"input","opts":{"password":false,"prompt":"Partial Paresis: "},"value":"No"},"8":{"name":"input","opts":{"password":false,"prompt":"Alopecia: "},"value":"Yes"},"9":{"name":"stdout","text":"Male Yes No Yes No Yes Yes No Yes\n"}},"pos":24.25,"start":1661374815138,"state":"done","type":"cell"}
{"end":1661375069364,"exec_count":295,"id":"166d52","input":"predict(features)","kernel":"ds_env","output":{"0":{"name":"stderr","text":"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/base.py:450: UserWarning:\n\nX does not have valid feature names, but DecisionTreeClassifier was fitted with feature names\n\n"},"1":{"ename":"ValueError","evalue":"Expected 2D array, got 1D array instead:\narray=[1. 1. 0. 1. 0. 1. 1. 0. 1.].\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Input \u001b[0;32mIn [295]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mpredict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfeatures\u001b[49m\u001b[43m)\u001b[49m\n","Input \u001b[0;32mIn [294]\u001b[0m, in \u001b[0;36mpredict\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mpredict\u001b[39m(x):\n\u001b[0;32m----> 3\u001b[0m     prediction \u001b[38;5;241m=\u001b[39m \u001b[43mclf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpredict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      4\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m prediction \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m      5\u001b[0m         \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mYou have Diabetes. Please seek medical attention from a professional\u001b[39m\u001b[38;5;124m'\u001b[39m)\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/model_selection/_search.py:500\u001b[0m, in \u001b[0;36mBaseSearchCV.predict\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    482\u001b[0m \u001b[38;5;124;03m\"\"\"Call predict on the estimator with the best found parameters.\u001b[39;00m\n\u001b[1;32m    483\u001b[0m \n\u001b[1;32m    484\u001b[0m \u001b[38;5;124;03mOnly available if ``refit=True`` and the underlying estimator supports\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    497\u001b[0m \u001b[38;5;124;03m    the best found parameters.\u001b[39;00m\n\u001b[1;32m    498\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    499\u001b[0m check_is_fitted(\u001b[38;5;28mself\u001b[39m)\n\u001b[0;32m--> 500\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbest_estimator_\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpredict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/tree/_classes.py:505\u001b[0m, in \u001b[0;36mBaseDecisionTree.predict\u001b[0;34m(self, X, check_input)\u001b[0m\n\u001b[1;32m    482\u001b[0m \u001b[38;5;124;03m\"\"\"Predict class or regression value for X.\u001b[39;00m\n\u001b[1;32m    483\u001b[0m \n\u001b[1;32m    484\u001b[0m \u001b[38;5;124;03mFor a classification model, the predicted class for each sample in X is\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    502\u001b[0m \u001b[38;5;124;03m    The predicted classes, or the predict values.\u001b[39;00m\n\u001b[1;32m    503\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    504\u001b[0m check_is_fitted(\u001b[38;5;28mself\u001b[39m)\n\u001b[0;32m--> 505\u001b[0m X \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_validate_X_predict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcheck_input\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    506\u001b[0m proba \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtree_\u001b[38;5;241m.\u001b[39mpredict(X)\n\u001b[1;32m    507\u001b[0m n_samples \u001b[38;5;241m=\u001b[39m X\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m0\u001b[39m]\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/tree/_classes.py:471\u001b[0m, in \u001b[0;36mBaseDecisionTree._validate_X_predict\u001b[0;34m(self, X, check_input)\u001b[0m\n\u001b[1;32m    469\u001b[0m \u001b[38;5;124;03m\"\"\"Validate the training data on predict (probabilities).\"\"\"\u001b[39;00m\n\u001b[1;32m    470\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m check_input:\n\u001b[0;32m--> 471\u001b[0m     X \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_validate_data\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mDTYPE\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maccept_sparse\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcsr\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreset\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m    472\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m issparse(X) \u001b[38;5;129;01mand\u001b[39;00m (\n\u001b[1;32m    473\u001b[0m         X\u001b[38;5;241m.\u001b[39mindices\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m!=\u001b[39m np\u001b[38;5;241m.\u001b[39mintc \u001b[38;5;129;01mor\u001b[39;00m X\u001b[38;5;241m.\u001b[39mindptr\u001b[38;5;241m.\u001b[39mdtype \u001b[38;5;241m!=\u001b[39m np\u001b[38;5;241m.\u001b[39mintc\n\u001b[1;32m    474\u001b[0m     ):\n\u001b[1;32m    475\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNo support for np.int64 index based sparse matrices\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/base.py:577\u001b[0m, in \u001b[0;36mBaseEstimator._validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    575\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mValidation should be done on X, y or both.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    576\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m no_val_X \u001b[38;5;129;01mand\u001b[39;00m no_val_y:\n\u001b[0;32m--> 577\u001b[0m     X \u001b[38;5;241m=\u001b[39m \u001b[43mcheck_array\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minput_name\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mX\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mcheck_params\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    578\u001b[0m     out \u001b[38;5;241m=\u001b[39m X\n\u001b[1;32m    579\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m no_val_X \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m no_val_y:\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/utils/validation.py:879\u001b[0m, in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001b[0m\n\u001b[1;32m    877\u001b[0m     \u001b[38;5;66;03m# If input is 1D raise error\u001b[39;00m\n\u001b[1;32m    878\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m array\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m--> 879\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    880\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mExpected 2D array, got 1D array instead:\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124marray=\u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    881\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mReshape your data either using array.reshape(-1, 1) if \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    882\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124myour data has a single feature or array.reshape(1, -1) \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    883\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mif it contains a single sample.\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(array)\n\u001b[1;32m    884\u001b[0m         )\n\u001b[1;32m    886\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m dtype_numeric \u001b[38;5;129;01mand\u001b[39;00m array\u001b[38;5;241m.\u001b[39mdtype\u001b[38;5;241m.\u001b[39mkind \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mUSV\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m    887\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    888\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdtype=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnumeric\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m is not compatible with arrays of bytes/strings.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    889\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mConvert your data to numeric values explicitly instead.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    890\u001b[0m     )\n","\u001b[0;31mValueError\u001b[0m: Expected 2D array, got 1D array instead:\narray=[1. 1. 0. 1. 0. 1. 1. 0. 1.].\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."]}},"pos":24.75,"start":1661375069293,"state":"done","type":"cell"}
{"end":1661375115028,"exec_count":297,"id":"2973d8","input":"def convert(x):\n    if x == 'Yes'or x == 'Male':\n        return 1\n    else:\n        return 0\nGender1 = (convert(Gender))\nPolyuria1 = (convert(Polyuria))\nPolydipsia1 = (convert(Polydipsia))\nSWL = (convert(sudden_weight_loss))\nPolyp = (convert(Polyphagia))\nVisualB = (convert(Visual_Blurring))\nIrrita = (convert(Irritability))\nPP = (convert(Partial_Paresis))\nAlo = (convert(Alopecia))\n\nFeatures = np.array([Gender1, Polyuria1, Polydipsia1, SWL, Polyp, VisualB, Irrita, PP, Alo])\nFeatures\n\n","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([1, 1, 0, 1, 0, 1, 1, 0, 1])"},"exec_count":297}},"pos":24.375,"start":1661375115015,"state":"done","type":"cell"}
{"end":1661375118444,"exec_count":298,"id":"07d780","input":"features = Features\ndef predict(x):\n    prediction = clf.predict(x)\n    if prediction == 1:\n        print('You have Diabetes. Please seek medical attention from a professional')\n    if features == np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0]]):\n        print('You do not have diabetes. I hope you still enjoyed our project :)')\n    if features == np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1]]):\n        print('You have Diabetes. Please seek medical attention from a professional')\n    else:\n        print('You do not have diabetes. I hope you still enjoyed our project :')\n        \n        \n","kernel":"ds_env","pos":24.5,"start":1661375118441,"state":"done","type":"cell"}
{"id":"003749","input":"","pos":19.9375,"type":"cell"}
{"id":"1283be","input":"","pos":24.4375,"type":"cell"}
{"id":"a4d271","input":"","pos":19.75,"type":"cell"}
{"id":"ba2d2a","input":"","kernel":"ds_env","pos":15.5,"type":"cell"}
{"id":"d65c8c","input":"","pos":21.25,"type":"cell"}
{"id":"deb445","input":"","pos":24.875,"type":"cell"}
{"id":0,"time":1661358671822,"type":"user"}
{"last_load":1661358670845,"type":"file"}