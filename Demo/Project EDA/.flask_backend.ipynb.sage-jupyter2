{"backend_state":"running","connection_file":"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/.local/share/jupyter/runtime/kernel-3b0d97c0-98c7-4abb-88d6-bdf996170f01.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1661376009223,"exec_count":1,"id":"1a708c","input":"import pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport sklearn\nfrom sklearn.model_selection import train_test_split","kernel":"ds_env","pos":0,"start":1661376008431,"state":"done","type":"cell"}
{"cell_type":"code","end":1661376009238,"exec_count":2,"id":"99d20f","input":"df = pd.read_csv('diabetes_data_upload.csv')","kernel":"ds_env","pos":1,"start":1661376009229,"state":"done","type":"cell"}
{"cell_type":"code","end":1661376009248,"exec_count":3,"id":"dadc06","input":"results = []\nfor col in df.columns:\n    missing_or_not = df[col].isnull().values.any()\n    #print(col + \": \" + str(missing_or_not))","kernel":"ds_env","pos":2,"start":1661376009245,"state":"done","type":"cell"}
{"cell_type":"code","end":1661376009255,"exec_count":4,"id":"3aadac","input":"def convert(x):\n    if x == 'Yes' or x == 'Male' or x == 'Positive':\n        return 1\n    else:\n        return 0","kernel":"ds_env","pos":3,"start":1661376009253,"state":"done","type":"cell"}
{"cell_type":"code","end":1661376009367,"exec_count":5,"id":"2731d8","input":"for col in df.columns:\n    if col != 'Age':\n        df[col] = df[col].apply(convert)","kernel":"ds_env","pos":4,"start":1661376009355,"state":"done","type":"cell"}
{"cell_type":"code","end":1661376009999,"exec_count":6,"id":"a2f91a","input":"X = df.drop(['class', 'Age', 'weakness', 'Genital thrush', 'Itching', 'delayed healing', 'muscle stiffness', 'Obesity'], axis = 1)\ny = df['class']","kernel":"ds_env","pos":5,"start":1661376009990,"state":"done","type":"cell"}
{"cell_type":"code","end":1661376010578,"exec_count":7,"id":"fdb3af","input":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 42)","kernel":"ds_env","pos":6,"start":1661376010572,"state":"done","type":"cell"}
{"cell_type":"code","end":1661376011283,"exec_count":8,"id":"a49374","input":"X_train.columns","kernel":"ds_env","output":{"0":{"data":{"text/plain":"Index(['Gender', 'Polyuria', 'Polydipsia', 'sudden weight loss', 'Polyphagia',\n       'visual blurring', 'Irritability', 'partial paresis', 'Alopecia'],\n      dtype='object')"},"exec_count":8}},"pos":7,"start":1661376011276,"state":"done","type":"cell"}
{"cell_type":"code","end":1661376012528,"exec_count":9,"id":"21196a","input":"from sklearn.preprocessing import StandardScaler\nss = StandardScaler()\nX_train = ss.fit_transform(X_train)\nX_test = ss.transform(X_test)","kernel":"ds_env","pos":8,"start":1661376012520,"state":"done","type":"cell"}
{"cell_type":"code","end":1661376170498,"exec_count":13,"id":"dac0d5","input":"#gender - male and female\n#other features - yes or no\n[0] * 9","kernel":"ds_env","output":{"0":{"data":{"text/plain":"[0, 0, 0, 0, 0, 0, 0, 0, 0]"},"exec_count":13}},"pos":9,"start":1661376170492,"state":"done","type":"cell"}
{"cell_type":"code","end":1661376378906,"exec_count":21,"id":"50413a","input":"features = [0] * 9\ndetect(features)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"'No Diabetes'"},"exec_count":21}},"pos":10,"start":1661376378903,"state":"done","type":"cell"}
{"end":1661376014455,"exec_count":10,"id":"97d0cd","input":"from sklearn import tree\nfrom sklearn.model_selection import GridSearchCV\nparameters = {'criterion' :('gini', 'entropy', 'log_loss'), 'splitter' :('best', 'random')}","kernel":"ds_env","pos":8.5,"start":1661376014415,"state":"done","type":"cell"}
{"end":1661376019727,"exec_count":11,"id":"2d55c5","input":"clf = GridSearchCV(tree.DecisionTreeClassifier(), parameters)\nclf.fit(X_train, y_train)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=DecisionTreeClassifier(),\n             param_grid={&#x27;criterion&#x27;: (&#x27;gini&#x27;, &#x27;entropy&#x27;, &#x27;log_loss&#x27;),\n                         &#x27;splitter&#x27;: (&#x27;best&#x27;, &#x27;random&#x27;)})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=DecisionTreeClassifier(),\n             param_grid={&#x27;criterion&#x27;: (&#x27;gini&#x27;, &#x27;entropy&#x27;, &#x27;log_loss&#x27;),\n                         &#x27;splitter&#x27;: (&#x27;best&#x27;, &#x27;random&#x27;)})</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div></div></div></div></div></div>","text/plain":"GridSearchCV(estimator=DecisionTreeClassifier(),\n             param_grid={'criterion': ('gini', 'entropy', 'log_loss'),\n                         'splitter': ('best', 'random')})"},"exec_count":11}},"pos":8.75,"start":1661376019661,"state":"done","type":"cell"}
{"end":1661376378219,"exec_count":20,"id":"11e029","input":"def detect(x):\n    if x == [0] * 9:\n        return 'No Diabetes'\n    input_data = [x]\n    pred = clf.predict(np.array(input_data))\n    if pred == 0:\n        return \"No Diabetes\"\n    else:\n        return \"Diabetes\"","kernel":"ds_env","pos":9.5,"start":1661376378212,"state":"done","type":"cell"}
{"end":1661376382593,"exec_count":22,"id":"39be98","input":"features = [1, 1, 1, 0, 0, 0, 1, 1, 1]\ndetect(features)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"'Diabetes'"},"exec_count":22}},"pos":11,"start":1661376382583,"state":"done","type":"cell"}
{"end":1661376395736,"exec_count":23,"id":"69f870","input":"features = [1, 1, 1, 1, 1, 1, 1, 1, 1]\ndetect(features)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"'Diabetes'"},"exec_count":23}},"pos":13,"start":1661376395726,"state":"done","type":"cell"}
{"id":"760afb","input":"","pos":14,"type":"cell"}
{"id":0,"time":1661375904100,"type":"user"}
{"last_load":1661375904131,"type":"file"}