{"backend_state":"running","connection_file":"/projects/b36ed0b0-d7f5-416a-895a-d63c582b0b71/.local/share/jupyter/runtime/kernel-5e30552e-8292-467a-ae7f-011c12df576f.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"0aa789","input":"while loop uses a variable that has been set to zero and it iterates threw a certain number while a for loop iterates threw a list that has already been created.","pos":7,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"0ad82e","input":".column()","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1f3405","input":"dataframe[#the column you want to access]","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fe2338","input":"Plotly, Pandas, and numpy","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"66a27f","input":"Whats the difference between a while loop and a for loop?\n\n","pos":6,"type":"cell"}
{"cell_type":"markdown","id":"ae15c9","input":"How do I get all the column names of a dataframe?","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"b59bc1","input":"Name 4 different types of variables\n\n","pos":8,"type":"cell"}
{"cell_type":"markdown","id":"b9f0c2","input":"What packages have we learned so far? List them all down below\n","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"bc8b14","input":"How do I access a specific column from a dataframe? Write the method down below","pos":2,"type":"cell"}
{"end":1660582455381,"exec_count":5,"id":"25c019","input":"def nums_and_integers(a, b, c, d):\n    nums = [a, b, c]\n    target = d\n    if a + b == target:\n         return [a, b]\n    elif a + c == target:\n         return [a, c]\n    elif b + a == target:\n         return [b, a]\n    elif b + c == target:\n         return [b, c]\n    elif c + a == target:\n         return [c, a]\n    elif c + b == target:\n         return [c, b]\nnums_and_integers(4, 8, 5, 12)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"[4, 8]"},"exec_count":5}},"pos":12.03125,"start":1660582455376,"state":"done","type":"cell"}
{"exec_count":1,"id":"834c26","input":"\n","kernel":"ds_env","output":{"0":{"ename":"SyntaxError","evalue":"invalid syntax (3186867591.py, line 6)","traceback":["\u001b[0;36m  Input \u001b[0;32mIn [1]\u001b[0;36m\u001b[0m\n\u001b[0;31m    else:\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}},"pos":10,"state":"done","type":"cell"}
{"exec_count":15,"id":"0fc112","input":"def reverse_string(name):\n    reverse = name[::-1]\n    if name == reverse:\n        return True\n    else:\n        return False\nreverse_string('racecar')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"True"},"exec_count":15}},"pos":11,"state":"done","type":"cell"}
{"exec_count":43,"id":"772537","input":"","kernel":"ds_env","output":{"0":{"ename":"NameError","evalue":"name 'a' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [43]\u001b[0m, in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m nums \u001b[38;5;241m=\u001b[39m [\u001b[38;5;241m9\u001b[39m, \u001b[38;5;241m5\u001b[39m, \u001b[38;5;241m4\u001b[39m]\n\u001b[1;32m      2\u001b[0m target \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m9\u001b[39m\n\u001b[0;32m----> 3\u001b[0m \u001b[43mnums_and_integers\u001b[49m\u001b[43m(\u001b[49m\u001b[43mnums\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtarget\u001b[49m\u001b[43m)\u001b[49m\n","Input \u001b[0;32mIn [42]\u001b[0m, in \u001b[0;36mnums_and_integers\u001b[0;34m(nums, d)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mnums_and_integers\u001b[39m(nums, d):\n\u001b[0;32m----> 2\u001b[0m     nums \u001b[38;5;241m=\u001b[39m [\u001b[43ma\u001b[49m, b, c]\n\u001b[1;32m      3\u001b[0m     target \u001b[38;5;241m=\u001b[39m d\n\u001b[1;32m      4\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m a \u001b[38;5;241m+\u001b[39m b \u001b[38;5;241m==\u001b[39m target:\n","\u001b[0;31mNameError\u001b[0m: name 'a' is not defined"]}},"pos":12.0625,"state":"done","type":"cell"}
{"id":"11791c","input":"","pos":12.125,"type":"cell"}
{"id":"27de59","input":"","pos":12.25,"type":"cell"}
{"id":"389498","input":"","pos":12.5,"type":"cell"}
{"id":"8ebecc","input":"string, float, boolean, integer","pos":9,"type":"cell"}
{"id":"a29a13","input":"","pos":13,"type":"cell"}
{"id":"f52c70","input":"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nYou can return the answer in any order.","pos":12,"type":"cell"}
{"id":0,"time":1660582351201,"type":"user"}
{"last_load":1660324350725,"type":"file"}